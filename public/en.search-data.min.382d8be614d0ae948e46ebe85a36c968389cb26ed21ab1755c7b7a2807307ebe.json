[{"id":0,"href":"/docs/notes/university-notes/","title":"University Notes","section":"Notes","content":" University Notes # Where are all of the notes? # I\u0026rsquo;m still currently in the process of parsing through previous files. Revision is cruicial in the current state for anyone to make use of them.\n"},{"id":1,"href":"/docs/notes/","title":"Notes","section":"Docs","content":" Notes # This category will comprise of all of the notes that I\u0026rsquo;ve taken since using Obsidian. This includes material from University courses, online bootcamps, podcasts, readings, and more.\n"},{"id":2,"href":"/sermons/","title":"Sermons","section":"Home","content":" Sermons # "},{"id":3,"href":"/sermons/divine-disruption/","title":"Divine Disruption","section":"Sermons","content":"series: The God who remembers\nverse: Exodus 3:1-4\nMoses is running away after killing an Egyptian worker for mistreating a Hebrew. In this set of verses, Moses finds an eternally burning bush. Note that we can easily consider this a miracle, however it is also not so easily observed. Main Idea # There are moments when we go to God asking for something we desire or feel like we need. But sometimes God answers us by making life more difficult/troublesome. There are often things that we don\u0026rsquo;t realize need to be addressed until God tells us they need to be fixed.\nWhat is a divine disruption? # A quiet invitation, hidden in an ordinary interuption God often reveals himself in a quiet and gentle fashion. But why isn\u0026rsquo;t he so extravagant/flashy? Because God desires our genuine attention. Just like he doesn\u0026rsquo;t force us to love or believe in him, he also reveals himself in subtle ways to train ourselves to recognize his character. Idea: There\u0026rsquo;s burning bushes all around us, but we miss them. # It\u0026rsquo;s not a question of whether or not God is there, but a matter of us noticing how he\u0026rsquo;s working in our lives. Humans have a tendency for comfort, and regularity. We want to accomplish our own agenda. However these burning bushes will often cause you to change course to fulfill God\u0026rsquo;s agenda. What\u0026rsquo;s the point of these burning bushes? # To gain a better understanding of who God is. God calls us not to be stuck on this world, but to be saved by his Son. We are people who are born again with a new purpose. How do we recognize divine disruption? # If we look at verse 3, we notice that Moses had to turn aside in order to confront the burning bush. Note that the burning bush didn\u0026rsquo;t call out to Moses or get his attention. Moses noticed the bush by his own accord. Thus we must step out of our routine, out of our comfort in order to look towards God. Really look for the ways he\u0026rsquo;s working in your life. We are the problem, and the only thing we need to change is ourselves. Call to action # Stop moving so quickly and just pause. Turn towards God and listen for him. It will help us to see and understand that our purpose isn\u0026rsquo;t to just live in this world, but that God has called us for a greater purpose for his plan and for his glory. "},{"id":4,"href":"/sermons/the-alabaster-flask/","title":"The Alabaster Flask","section":"Sermons","content":"series: College group\nverse: Mark 14:1-11\nIn this verse we find a woman who pours an alabaster flask which is worth a year\u0026rsquo;s wage and dumps it on Jesus. It\u0026rsquo;s an expressive act that emphasizes her love for Jesus Christ. This in juxtoposition to Judas betraying Jesus for mere dollars demonstrates how being faithful to Christ will cost us in a worldly sense, and rejecting God will barely provide benefit to us in the worldy sense. Jesus was sinless and lived a perfect life. Yet he lives in a sinless broken world, so how can we act accordingly and similarly to him. In other words, what does God want from his people? Well obviously obedience, but what does that look like?\n\u0026ldquo;Extravagant sacrifice. To suffer and experience hardship for His glory.\u0026rdquo;\nWhy did the people want to crucify Jesus so badly?\nThey wanted to continue living indulgent lives that benefited themselves. Why was this woman able to even perform this act? Because she has an immense love and devotion to Jesus Christ. Question: What\u0026rsquo;s your alabaster flask?\nIn other words, what do we have available to sacrifice to God, but choose not to. Personally, it\u0026rsquo;s my career. I had many opportunities to sacrifice a better pay or job to do ministral work, but decided against it. I pray for a change of heart that I may be impactful at my workplace and share the gospel without fear. "},{"id":5,"href":"/sermons/seeing-as-god-sees/","title":"Seeing as God Sees","section":"Sermons","content":"series: The God who remembers\nverse: Exodus 2:1-10\nThe story of Moses\u0026rsquo; birth. His mother hid him in the reeds and the Phaoroh\u0026rsquo;s daughter decides to spare his life. She names him Moses because she, \u0026ldquo;Drew him out of the water\u0026rdquo; Admist a chaos for the Israelites, the mother of Moses sees it differently. Instead of fearing for her child\u0026rsquo;s life, she instead has a vision similar to God\u0026rsquo;s. It\u0026rsquo;s important to note that the mother deems her son as, \u0026ldquo;Fine\u0026rdquo; or in Hebrew, \u0026ldquo;Tov\u0026rdquo;. Which directly translates to Good. This echos the ideas from Genesis 1, where God found things Good. It wasn\u0026rsquo;t about the child\u0026rsquo;s physical appearance. It was about his character and she found it good. Obviously as humans, we have a tendency to react things in a worldly manner. But how much more joyful and at peace could we be if we saw things the way God sees it?\nHow can I describe God?\nHe remembers He\u0026rsquo;s not distant at all, rather he draws near to us. He is a moving God that is constantly working within our lives. Goal: See as God sees by recognizing his perspective more often. \u0026ldquo;Train your eye\u0026rdquo;\nGod sees goodness where others see a problem # News Flash: We care more about how we think about ourselves more than we value other people\u0026rsquo;s opinions. Your biggest criticizor is yourself because you know yourself better than anyone. You can either spend your life trying to make yourself ideal in the eyes of society, or be content in the lens of God. Not through the lens of performance, money, physical appearance, but through the lens of God\u0026rsquo;s purposes. God sees redemption when we see ruin # The mother tries to keep her child hidden away and protected from the searches for 3 months. But when she couldn\u0026rsquo;t bear it any longer, God takes over. But why does God wait this long, let the mother suffer with the turmoils and stress of hiding a baby? God waits for us to deplete our options because he desires full trust and surrender in him, not just a partial commitment. God is the only hope\u0026hellip; the only answer. God is capable of all things. Consider your suffering a joy, because in the midst of your problems, you can see how God is keeping his covenant and his faithfulness. Focus on the redemption, not the ruin God sees his purpose unfolding in the people we least expect # In the passage we see the Pharoh\u0026rsquo;s daughter as a central figure in Moses\u0026rsquo; story. Nobody could expect her to spare Moses\u0026rsquo; life because she is a direct descendant of the government that is trying to kill all baby Israelites. God is not the God who we think he is. God has a purpose beyond what we can comprehend. But how then can we trust in God or see how he sees things? Isn\u0026rsquo;t it far too difficult? Surround yourself in the Word, in his people, and in his presence. How can I take action and see as God sees the world? # If you look at the life of Jesus, he lived a life of complete suffering. It was about service, and stewardship. He was mocked, scorned, and cruficied. The Son of God, the Son of Man. LOOK AT THE CROSS No matter the circumstance, see it as God sees it. In our time of suffering, chaos, and uncertainty. God has not forgotten you, rather he has a plan for you. "},{"id":6,"href":"/sermons/where-is-god-in-this/","title":"Where is God in this?","section":"Sermons","content":"series: The God who remembers\nverse: Exodus 1:1-22 \u0026ldquo;You won\u0026rsquo;t find any mention of God, miracles, signs, or any amazing parables. Rather hardship, suffering, oppression. But you will see that God is still deeply in work.\u0026rdquo;\nWhy is God silent sometimes? # To give us hope to something greater. Contextually, the Israelites have experienced an absence of God for roughly 400 years. In verse 1, we see the geneological descendants of Abraham in order to show that God is working on the promises he made back in Genesis. God is always there. And he has a masterful plan. God builds slowly. We see that the people nation of Israel grow to great heights. God has been faithfully helping them multply and grow into a nation. God siliently aided the Israelites. What is God doing during these lulls? # Silence does not equate to God not working with us. He is always with us and constantly watching over us and working within us. He is always holding our hand. Stand firm and abide in Him. There will be worldly things that will try to pull you away from trusting in God. They will rip you apart and tear you to pieces. And God allows these moments too. God continues to stay silent but also continues to work. This is because he cares about us and would rather us grow than bring immediate relief. \u0026ldquo;It\u0026rsquo;s not punishment, it\u0026rsquo;s preparation for something better\u0026rdquo;. How should we navigate through these quiet times? # Daily faithfulness but what does this look like? Often it\u0026rsquo;ll feel like, \u0026ldquo;I\u0026rsquo;m going nowhere. I\u0026rsquo;m not good enough. I\u0026rsquo;m not producing enough. Where are the results?\u0026rdquo;\nBut just like we don\u0026rsquo;t see God\u0026rsquo;s provisions and how he\u0026rsquo;s working within our lives, we also fail to see how we are working within our own lives. We need to also be mindful of how we mesaure ourselves. You may think that you\u0026rsquo;re stagnant, but you\u0026rsquo;re in fact growing faster than ever before.\nTo combat this, we need to be actively mindful of ourselves. We need to reflect often and see, \u0026ldquo;Where has God been faithful to me?\u0026rdquo;. Sometimes it\u0026rsquo;s not a matter of \u0026ldquo;God working\u0026rdquo;, but rather us \u0026ldquo;Seeing how he is working\u0026rdquo;.\nSo pray often. Talk to God. Be present in the Word of God in order to remind yourself of the presence of God.\nWhen does Godly obedience begin? # When we revere God more than we fear people. We can see this in verse 17 when the Egyptian mid-wives refused to follow the Phraoah\u0026rsquo;s commandment to kill all Hebrew male born babies. Defying the Pharoah\u0026rsquo;s word would result in immediate execution, but they feared God more than man. Having a deeper respect for God\u0026rsquo;s authority, even when it costs us. This obedience is unseen, sacrificial, costly, and just very real. Only God saw these actions. And so God \u0026ldquo;Dealt well with the mid-wives\u0026rdquo;. When we are quietly obeying and being faithful, even when nobody is watching. God will honor our obedience, even when nobody else sees. Soften your heart to enable yourself to see the ways in which God is working\u0026hellip; "},{"id":7,"href":"/sermons/spiritual-discipline/","title":"Spiritual Discipline","section":"Sermons","content":"series: Silence and Solitude\nverse: Mark 6:30-32\nThe world is fast, we prioritize speed and efficiency.\nIf we don\u0026rsquo;t take time to recognize God and feel his presence, life and time will slip right past you.\nWe need moments to absorb and reflect what we\u0026rsquo;re going through in order to avoid the effect of missing what is happening or recognizing what you\u0026rsquo;ve been through.\nChrist calls to calm # Mark 6:30-32 Take a break. Reset yourself Intentionally seek God and retreat. Spend tome with God.\nSecret Solitude # Mark 1:35 Enjoy solitude with God and unwind Wake up early and just spend time with God.\nPause Purposefully # A lot of people look at social media or watch netflix to rest. But it actually does the opposite. It\u0026rsquo;s just an escape.\n\u0026ldquo;How do we reenergize ourselves and have meaningful rest?\u0026rdquo;\nFocus on God and have a conversarion with him. Read the bible, listen to God\u0026rsquo;s word.\nMatthew 11:28-29\nAs distracting as the world can seem to me, God will gently guide us will give us rest. Psalm 62:1-2 "},{"id":8,"href":"/sermons/waiting-beyond-time/","title":"Waiting Beyond Time","section":"Sermons","content":"series: Counter Cultural Convictions\nverse: Daniel 12:1-13\n[[Time Anxiety]] But time is a gift. Hold firmly to God\u0026rsquo;s sovereignty, trust in his plan.\nWe need to have the courage to wait beyond time. What does this mean?\nWhy is time so valuable? # How we spend our time is how we define our identity. \u0026ldquo;Faster is better\u0026rdquo; is an idea that many people in society identify themselves with. Many of us believe that there is value in speed and efficiency. [[Time Famine]] is the idea that no matter how hard we try, we cannot accomplish everything that we desire. Time is supposed to be a gift from God to Cherish, but it has devolved into something else. What does waiting do to us? The benefit? # Waiting shifts our identity into people of holiness rather than hopelessness. A difficult season of waiting is not accidental. There\u0026rsquo;s a purpose for our trials. \u0026ldquo;Blessed is he who waits\u0026rdquo; Periods of waiting allow us to remove impurities and strife. It strengthens our faith in God. Actively waiting produces holiness. The wicked will respond to waiting with wickedness and strife. But believers who wait on God actively by keeping their faith will be rewarded. DO NOT FEAR: your job is not to climb a ladder or sprint in a race. It\u0026rsquo;s to wait for God to let you do as you do. How are we to be people that wait beyond time? # Waiting isn\u0026rsquo;t an obstacle, it\u0026rsquo;s not an obstruction. It\u0026rsquo;s an opportunity to look forward to and feel excited about because it\u0026rsquo;s a chance for us to show our piety. Remember God\u0026rsquo;s providence and promises It\u0026rsquo;s not about the circumstance we find ourselves in. It\u0026rsquo;s about who we are and who is behind us, which is God. God promises us an eternal inheritance. "},{"id":9,"href":"/sermons/how-to-go-all-in-on-god/","title":"How to Go All In On God","section":"Sermons","content":" Recognize how weak and insignificant you are. You are not as righteous as you are Jesus tells us to \u0026ldquo;take from me\u0026rdquo; his righteousness Go to Christ and ask for his help to be righteous Shake God\u0026rsquo;s hand Shaking hands is a classic greeting that we often use when we invite someone into our home. We need to invite the holy spirit into our hearts, welcome God into our lives. Jesus will come into our lives and will eat with us We will share a meal together, a very intimate experience. God doesn\u0026rsquo;t want just a small snack or entree. He wants to spend the entire evening together, all the way to dessert. Main takeaway\nJesus immersed himself completely within Hell, pain, fire, and suffering for our sakes. Recognizing this should help us to grow a fiery passion to invite him into our lives and look toward God. "},{"id":10,"href":"/posts/first-blog-post/","title":"First blog post","section":"Blog","content":"The reason for starting this blog is to get my thoughts down into writing in a medium that I can share. I want to attach this to my personal website and express my ideas with the small hope that it\u0026rsquo;ll resonate with somebody else.\n"},{"id":11,"href":"/posts/stop-lettings-others-choose-where-to-eat/","title":"Stop lettings others choose where to eat","section":"Blog","content":"To go on a little tangent, I used to think that letting other people choose where to eat was the right thing to do. The nice thing to do, because you\u0026rsquo;re letting them choose what they want to eat right? But often times, when people are given the responsibility of choice, they freeze up, they struggle to pick a place because they want to find a place that everyone wants to eat, but are not confident in doing so. This is why I find it so important for there to be someone that is willing to bear the brunt of choosing a place, even if that means being blamed when people are unhappy with the decision. It\u0026rsquo;s better to lift the burden of having to choose away from someone else, and instead take it upon yourself.\n"},{"id":12,"href":"/posts/taking-my-health-seriously/","title":"Taking My Health Seriously","section":"Blog","content":"Today\u0026rsquo;s writing is going to be over my goals for the month of December 2024. For far too long have I \u0026ldquo;understood\u0026rdquo; the importance of diet, sleep, and exercise to not make an active change in my lifestyle. It is finally time for this 20 year old boy to become a man and live a healthier life. My goals will be stated below for this month of December, and if I can just do this for one month, I\u0026rsquo;ll be locked in for the rest of my life is my assumption.\nFollow the running app 6 week 5k training program Sleep before 1AM, and there is zero excuse for this one. Charge all technology at the desk, not at the bed. Drink 40oz of water a day at the minimum No more snacks or sweets unless you\u0026rsquo;re with your girlfriend. When you\u0026rsquo;re alone you can only drink water. Journal daily and also measure weight Listen to Christian or classical music And this is really all that I ask of you for this period of time. It\u0026rsquo;s not going to be easy. It\u0026rsquo;s going to be really hard. Try not to mess up, but when you do, get back up.\n"},{"id":13,"href":"/sermons/confession-not-conformity/","title":"Confession Not Conformity","section":"Sermons","content":"series: Anchored in hope, rising in faith verse: Daniel 9:1-23 The church has been on a decline, but it can be reformed. Not by conforming to the world, but by confessing our sins to God. If people want to see a revival of the church, it has to start with every individual member. What does a revived church look like? God\u0026rsquo;s glory is revealed through each individual person.\nIntroduction # One issue with Korean/Korean-American churches is the over-emphasis of community. \u0026ldquo;Prosperity Gospel\u0026rdquo; is the theory that as long as you follow Jesus, your life will be easy, fulfilling, prosperous, etc. But the actual teachings of the gospel share a very different idea. The idea that we are all sinners, and that we are condemned to death. But through the grace and death of our Lord Jesus that we are saved. There\u0026rsquo;s a lot of division within the christian church today. People are ignoring the word of God for the sake of cultural acceptance. Some churches are now accepting lgbtq, same sex marriage within the clergy, etc. Furthermore, we have the entertainment focused conservative churches that host intense worships that can be considered concerts. These church services have \u0026ldquo;heightened emotions\u0026rdquo;, but a decline in God\u0026rsquo;s word.\nWe can easily face the same issue when we focus community over Christ. And on the individual level, sometimes we prioritize a church where we find a sense of belonging, or a tight knit friendship. And at a certain point, we value our community over the actual service. We need to stop conforming to the world.\nWhat are the signs of a desolate church? # The church\u0026rsquo;s heart and mind are captured by forces that are foreign to God.\nDaniel 9:13 People are following things that are away from God\u0026ndash; from the ways of the world. Israelites are called to live a life of holiness. And they were commanded to do so. But they didn\u0026rsquo;t abide in those rules. They would conform to what the surrounding nations would do because that life was: easier, promised more security, peaceful, and comforting. While under Babylonian rule, they became more and more comfortable with Babylonian culture. On the individual scale, we make terrible choices. We choose to stay awake just a little longer, or immerse ourselves in lust, etc. We often prioritize our own gratification and prosperity, and not following what God has revealed to us. It shows how much we are lacking as believers and followers. Another sign is the church feels Guilt and Shame We feel shame because we lost purpose and identity. We begin to question ourselves, \u0026ldquo;Are we really any different to non-believers?\u0026rdquo; Are you practicing counter-cultural behaviors such as service, loving, sacrifice, discomfort, etc. Is your citizenship truly in heaven? The church has become a byword among others. Byword - Disgrade, object of shame When others observe us, they don\u0026rsquo;t consider us any different. Our Christian identity is merely a title, and not our citizenship. Daniel in the text is confessing that his people have become a byword in the community, and that they are no different to everyone else. Is Salt \u0026amp; Light a desolate church? # In my honest opinion, I think it\u0026rsquo;s difficult to throw everyone under the same umbrella. I think that there are some of us that can be recognized as different from other believers, whereas others aren\u0026rsquo;t. What is the danger/consequences of a desolate church? # We lose God\u0026rsquo;s Protection.\nDaniel 9:17 -\u0026gt; It was God who brought them calamity. He stopped protecting them. The worst judgment that Mankind can possibly experience is being taken away from the presence of God. People lose their sense of purpose. \u0026ldquo;Where do you place your priorities in your free time?\u0026rdquo; We willingly and deliberately shift towards chaos by running away from God How is a desolate church restored? # The confession of Sin\nBut not just confession, but rather convicted confession. Through reading scripture Daniel 9:2 -\u0026gt; It was only by reading through scripture that he understood how important and urgent it was to confess the sins of himself and the church. Jeremiah 12:11 -\u0026gt; Shows how Daniel was convicted by the word of God. When your prayer is saturated by the word of God, then you\u0026rsquo;ll know you\u0026rsquo;re praying the right prayer. Align yourself with God\u0026rsquo;s commandment Be generous Be kind Serve others Lean into discomfort Don\u0026rsquo;t be angry Go towards God. It\u0026rsquo;s not too late. One man\u0026rsquo;s prayer (Daniel\u0026rsquo;s) shed hope to a completely lost nation. As much as God is great and to be feared, He is merciful and forgiving. Recognize this truth and kneel down in reverence to God. God loves us so much, and he forgives us regardless of what we have committed. Conclusion # As a church we need to constantly confess to our brokenness and sinfulness. Cause if we don\u0026rsquo;t, then we will conform to the values and culture of the World. It is only by faith and through the grace and mercy of God that we are saved. Recognize this beautiful opportunity as believers to share His goodness with the world. Saturate our words and our thoughts with scripture Pray that God\u0026rsquo;s will will be done, by members of this church. "},{"id":14,"href":"/sermons/courageous-consistency/","title":"Courageous Consistency","section":"Sermons","content":"series: Anchored in hope, rising in faith\nverse: Daniel 8:27 Context: This terrible ruler, the king of Greece, was desecrating the church and persecuting the Jews. Daniel had a terrible vision of this that it brought him illness. But even then, we find that in verse 27 that he rose and \u0026ldquo;went about the king\u0026rsquo;s business\u0026rdquo;. He remains courageously consistent although he was facing overwhelming fear and hardship.\nWhen life is overwhelming and uncertain, how can we also remain courageously consistent just as Daniel was. Because we can\u0026rsquo;t so this by our own power.\nWhy is endurance better than fleeing from difficult times? # Endurance fills us with peace and also frees us from control. If we don\u0026rsquo;t endure but instead we flee by acting rashly or shutting down or compromising our values, we are trying to take our own control of the situation. But when we do this, we lie to ourselves thinking that we will feel better, but this is a temporary solution. It\u0026rsquo;s instant gratification. Example: A family that is comfortable and happy and loving. But dad feels like if they ha djudt a little more money they\u0026rsquo;d be set. An opportunity arises to work abroad and make a lot more money. The family agrees and he makes more. But eventually the family falls apart as the father grows distant and has less of an image. The loneliness of the father leads to an affair and then the entire family is broken. The father didn\u0026rsquo;t endure. He tried to take control of his own destiny???? Wait i don\u0026rsquo;t get it. In hindsight it was a poor decision, but i feel like before that it wasn\u0026rsquo;t that rash a decision. What is endurance? # It\u0026rsquo;s not to just \u0026ldquo;suck it up\u0026rdquo; and sit in suffering. Rather it\u0026rsquo;s \u0026ldquo;ordinary faithfulness for extraordinary purposes\u0026rdquo;. No matter what situation Daniel found himself in, he remained faithful and had daily obedience. Making moves not based on your preference, but rather God\u0026rsquo;s direction. Doing the same mundane things every single day. God uses this ordinary faithfulness to fulfill his will. The principle of consistently doing what is required of us gives everything meaning. Things like keeping the room clean doing your work studying talking to your friends, building relationships Where does Endurance come? # Endurances comes from seeking to understand God\u0026rsquo;s plan. He\u0026rsquo;s seeking to find what God\u0026rsquo;s will is. Through the lens of the gospel truth, our suffering has purpose. God uses hard times to shape us to the image of Christ. Our hope is secured no matter what we face because Jesus has endured and has suffered for our sakes. Choosing to be consistent in our daily matters, is much better than looking for extraordinary options as a solution to our problems.\n"},{"id":15,"href":"/sermons/resting-in-the-unknown/","title":"Resting in the Unknown","section":"Sermons","content":"series: Anchored in hope, rising in faith\nverse: Daniel 7:15-28\nA man receives a direct vision from God. The \u0026lsquo;ancient of days\u0026rsquo; executes judgment. Daniel holds on to the tension of not knowing. He doesn\u0026rsquo;t demand understanding, but instead continues to rest in both the unknown and peace. People are generally restless with the unknown. We seek answers at every turn. But finding the answer won\u0026rsquo;t result in peace. Often times the answer isn\u0026rsquo;t clear, thus the increase in knowledge leads to confusion.\nWhy is knowledge alone insufficient to bring peace?\nknowledge can inform the mind but it\u0026rsquo;s not capable of settling the heart. even divine knowledge cannot bring peace. God is always ruling, in control, and omniscient. How do we feel peCe?\nBy trusting in the one that provides us life. Trust in God. How can we respond when clarity hasnt come How can we rest in the unknown? Verse 28, look at how Daniel responds. Daniel kept it to himself and in his heart. Sort of bit his tongue, and didn\u0026rsquo;t act recklessly or freak out. How was he able to rest? Daniel has been seeing a lot of visions recently. Fix your eyes on the cross. On our redeemer. As we deal with uncertainty (no matter what it is), be at rest in knowing that God is in control and he has a plan for us. "},{"id":16,"href":"/sermons/persistent-prayer/","title":"Persistent Prayer","section":"Sermons","content":"series: Anchored in hope, rising in faith\nverse: Daniel 6:10\nKing Darius persian ruler Daniel is old now ~80 years old People were trying to dig up dirt and find any flaw in his character. The only way to take Daniel down was to attack his devotion to God. \u0026ldquo;For 30 days, let nobody worship anyone buy you. If you break this law they will be thrown into the Lion\u0026rsquo;s den\u0026rdquo; Daniel is being asked to temporarily stop praying for God. Realistically he could reason and say that this is just a small break. But no, he could not compromise this value. Because Daniel disobeyed, he is theown into the lion\u0026rsquo;s den. But even in this dangerous space, he remains calm and continues to pray to God. All people have strong grit and resilience. But where are we placing our grit? 3 Facts about prayer # Prayer shapes our identity, not just our actions Notice how Daniel almost immediately goes to pray in his chamber as he\u0026rsquo;s always done. It was a lifelong practice that was so deeply tied to his identity, rather than it being an action. Prayer wasn\u0026rsquo;t just a duty to fulfill. Daniel instead builds a deep relationship with God by constantly seeking him out. His being was shaped by his communion with God. How should we handle hardships and stress? By not being self-reliant. The more we depend on our weak and human selves, the more we burden ourselves. We need faith instead of fear. This won\u0026rsquo;t come to us unless we center our lives over prayer. It\u0026rsquo;s a lifelong process of commitment and love of Christ. Prayer is a lifeline not a last resort Daniel didn\u0026rsquo;t pray the moment trouble came. He actually had already been praying consistently before the crisis arrived. Prayer is more important than life itself. Stop thinking if prayer as a convenience to get what we want. It\u0026rsquo;s not just a religious duty. Prayer is a lifeline built on a life time of discipline. Don\u0026rsquo;t depend on other things because they don\u0026rsquo;t have any value. Have a joyous heart that longs to know God deeply. Only then will you experience a life of persistent prayer and a rise in faith. What are some good opportunities to pray? Eating Right before going to bed Starting studying Before exercise As you drive Right as you wake up. Make a time for it. Prayer assures of God\u0026rsquo;s word. It\u0026rsquo;s not an escape of our troubles When Daniel prays nothing changes He still enters the lion\u0026rsquo;s den. He literally had a HARDER time because he prayed, instead of deliverance. The word of God reveals to us that when we pray, life gets harder. One profound truth of the story: It ends in safety and deliverance. Most importantly the deliverance is applied WITHIN the trial, not pulling Daniel out of the trial. When God could have easily removed troubles from our lives, he instead is right there with us as we go through them. Jesus faced the ultimate punishment for us first, that we would be able to succeed in our small trials. We can only deal with our current problems so that we don\u0026rsquo;t have to endure with the ultimate problem of eternal suffering. God has not abandoned us. His word came into fulfillment through Jesus. Prayer: Father we thank you in your revalation to us in shwowing us that our communication to you is not just meaning for us to be delivered from our miseries. But rather it\u0026rsquo;s to help us identify ourselves in you and experience your word come true in both our current life and our eternal life. Hello us to see the value of prayer and have greater grit/persistence more than ever befoe rto pray. to count the cost of prayer for your glory and our joy. help us to be anchored in hope and turn to yoy confidently knowing thar Jesus Christ experienced the ultimate death aleeady. Help us to continue rising in faith to obey your word.\n"},{"id":17,"href":"/sermons/vessel-of-mercy/","title":"Vessel of Mercy","section":"Sermons","content":"series: Anchored in hope, rising in faith\nverse: Daniel 5:1-7, 13-31 Summary: The new King Belshazzar, the successor of King Nebuchadnezzar disrespected God by drinking from the chalices from the temple (the house of God). The feast is reckless because he\u0026rsquo;s chasing dopamine desperately before his death.\nReckless life that speaks to humanity # What does it mean to be reckless? It\u0026rsquo;s to desperately chase something with no avail. When death is imminent, it is human nature to indulge in sensuality and pleasure. Recklessness can be seen in cheating as well. People cheat because they crave and desire something that isn\u0026rsquo;t being found within the relationship. Revelation based on this recklessness # Wisdom can not be found anywhere in the world, only in the word of God. You are a created being by a marvelous creator. You need to turn to your creator to learn more about them. What we need to do as people who are believing in the word of God, our responsibility. # Trust in the word of God. He is the only true source of wisdom. When you reject the word of God, it leads to destruction. In verse 22 it shows that Kiny Belshazzar knew all of the good works of God and his eminence, however he deliberately CHOSE to worship the idols of this world. If you are a christian, and truly know the word of God, you need to abide to it. Or else God will judge you. All Christians will be judged but not condemned. To avoid condemnation, we need to believe in the death and resurrection of the Son, Jesus Christ. We don\u0026rsquo;t get to earn or work for our salvation, but the rewards that we reap in heaven are based upon our trust in him and our works? God revealed to us his truth, and it is our calling to act on this truth. We need to be vessels of life, not of waste. If you think of yourself as a vessel of God and mercy, you will start to act holier. Jesus was the ultimate vessel sacrifice that allows us to be vessels of mercy. If we do this as temples of the holy spirit, we will find signficance and meaning within our lives. Will we ever find satsifcation, meaning, or joy, when you achieve everyrhing for just yourself. You will only be more and more concerned sbout the future. When we act as a vessel of mercy, not only do we find significance in our lives, we start to experience joy. We start to not be shaken by our external circumstances. You will realize the joy thet God has revealed and provided to us really means, because this is how we were designed to be. Stay disciplined and firm with the word of God "},{"id":18,"href":"/sermons/spiritual-meekness/","title":"Spiritual Meekness","section":"Sermons","content":"series:\nverse: Matthew 5:5\nWhat does it mean to be meek?\nBiblical definition: Not weakness, but strength under control. Submissive but strong. Easily imposed on Humble, slow to anger Meekness is a difficult quality to achieve. It’s similar to stoicism. Not defensive or confrontational.\nyou need to find your satisfaction in being a child of God.\nYou are already meek or capable of it as a person that has accepted Jesus has your Lord and Savior.\n"},{"id":19,"href":"/sermons/courage-to-lose-control/","title":"Courage to Lose Control","section":"Sermons","content":"series: Counter cultural convictions\nverse: Daniel 4:28-37 King Nebuchadnezzar is humiliated and humbled because he was so prideful. Not just a boastful nature, but a spiritual pride.\nDo we have spiritual pride?\nSpiritual pride leaves to an obsession with control. Nebechadnezzar thinks that the fruits of his labor all came by his own doing. Spiritual restoration occured when he let go of his control and gave all glory to God most high.\nWhen we have the courage release our control and pride to God, then we actually experience such great complete peace. Not just temporarily, but eternally. Letting go isn\u0026rsquo;t losing something, it\u0026rsquo;s allowing God to lead our lives.\nHow can we become courageous to lose control? You have to look up and toward God and recognize his greatness, and our lowliness. Understand that he is WORTHY of our devotion. Allow our struggles to ignite our hearts and humble ourselves. When we go through hardship, we need to understand that we never even deserved to live. So we should be joyous as we go through difficulties.\nControl will kill our joy and peace in any situation (good or bad). Look at Daniel 4 where the king is content and at ease because his kingdom was prosperous. His life was flourishing, and yet in verse 5 he quickly became afraid because of a dream. His joy and peace was incomplete. So as easily as he can obtain prosperity, he can lose it. The natural order of life is becoming anxious. Because when we are up, we are anxious to stay up. And when we\u0026rsquo;re down, we arr anxious to get up. The king places his identity within his own glory and prosperity. So the thought of losing it has completely taken over his mental state. Having a heart of humility id knowing that we don\u0026rsquo;t deserve anything. We have to admit that we are prideful and recognize how everything in this life is a gift. Every breath we take, every bite of food. We depend on God for everything. We feel powerless when we lose the very thing we thought we could control. The best example of this id our own lives. We assume we get to live and control our own lives, but the irony is that we become more controlled and powerful by giving it all to god. When we look for relationships that glorify ourselves we are prideful and sinning. Pride makes us look for people to match our needs, rather than us matching other\u0026rsquo;s needs. Community groups do not exist to meet your needs. It\u0026rsquo;s to meet the needs of other people. God honors those who honor him. Proper worship is one way to honor God. Worship is not about us, it\u0026rsquo;s about God. Practicing proper worship helps us to get back on track. It will fuel courage to lose control. Come to Church as a servant, and not just as a consumer. Participate, be active and involved. "},{"id":20,"href":"/sermons/faithful-in-the-fire/","title":"Faithful in the Fire","section":"Sermons","content":"series: Steadfast faith\nverse: Daniel 3 Shadrach, Meshach, and Abednego are cast into the fire for not worshipping Nevuchadnezzar\u0026rsquo;s idol. They survive through the power of Jesus Christ.\nWe are human. We have fears of failure and an expectation of loss. We all live in fire.\nMain idea: So how can we hold on to our convictions without being consumed by the fire.\nPluralism: What we think about the most is our god. It becomes our greatest concern. When does suffering consume us When we stop focusing our time and attention on God How does God deliver us in those moments. By encountering Him. Recognize his presence and in his divine protection. He will be WITH us through hard moments rather than removing them. And this is because our God is relational, not a wish maker. He cares and loves us and relates with us. A personal encounter with God in these hard times affirms our love and faithfulness with God. What do we do to hold on to these convictions. Focus on the \u0026ldquo;fourth man\u0026rdquo; and not on the fire/heat. Be confident and focused on God. Recognize that God\u0026rsquo;s suffering was our means for salvation\nFather as you have lead your son to suffer with us. I pray that this truth be so REAL in our hearts and our lives. This truth would be so valuable that we would give our life and everything for you. That we would not be shaken by the values of this world but instead believe in your words and walk in a way that is pleasing to you. Make this real as we meditate together in the shffering of Jesus Christ. Convict our herats and draw us closer to you that we may leave this place today tranaforms ans conformed in your likeness.\n"},{"id":21,"href":"/sermons/straying-away-from-idolatry/","title":"Straying Away From Idolatry","section":"Sermons","content":"series: Pastor Myung\nverse: Exodus 32:1 The golden calf idol\nThere must only be God in our hearts when we desire to worship the Lord. There shouldn\u0026rsquo;t be any ulterior motive or something that takes precedence such as friends or the pastor.\nThe israelites struggled with faith in the Lord because they couldn\u0026rsquo;t see him. While Moses was gone, they couldn\u0026rsquo;t bear to patiently wait and instead created their own God.\nPeople often forget the content and information of the sermon\u0026rsquo;s from just the past sunday. Think about how many sermons you\u0026rsquo;ve forgotten in your lifetime.\nGod\u0026rsquo;s seat in our hearts should only be filled with God. Nobody else.\nDo not serve our God as if he were an idol.\nWe can try to do everything for God such as worshipping him tirelessly, praying fervently, reading the bible, etc. But be careful that God is not an idol.\nWhat is this key difference?\nGod is not your genie. You cannot just depend on him to give you everything that you want.\nExodus 32:1-14 shows how God is relatable to us. He is a jealous but righteous God who was angry at the Israelites but accepted Moses\u0026rsquo; pleas.\n"},{"id":22,"href":"/sermons/the-wisdom-of-god/","title":"The Wisdom of God","section":"Sermons","content":"series: Counter Cultural Convictions\nverse: Daniel 2\nWe need to recognize that we are NEVER in control of our lives, no matter how much we want to believe otherwise.\nWhere do we place our trust in today? Ourselves, our pride?\nWhat is wisdom?\nGod\u0026rsquo;s insight for the best way to live. The book of Daniel shows this when God reveals the mystery when no person of flesh could. We need to discernment and insight into how God is working in our lives. Recognize that GOD is in control not us. What is our response to times of need? It should be God and his godly wisdom. Why do we need wisdom?\nWorldly/human wisdom cannot solve life\u0026rsquo;s greatest challenges or mysteries. No matter what technology and knowledge you may have, it\u0026rsquo;s not enough. The most impossible feats are only possible through God and his wisdom. How do we obtain wisdom?\nNotice how Daniel goes to find his closest friends. He asks them to go to the Lord and pray. Approach God and seek his wisdom. Do everything you can to understand the situation through lens of faith. Spiritual discipline. Fasting, waking up early. Desperate and passionate for God like it was life or death. After the miracle of Jesus\u0026rsquo;s ressurection, and the providence of the Word of God, we no longer have a need for visions. Our wisdom can be derived directly from the the Word and our relationship with God. Spiritual Sight. When you look at the world through this lens of Faith, you will be able to recognize how God is using these things for his plan. Do not worry or be afraid. Trust in God and have faith in Jesus Christ. Daniel\u0026rsquo;s immediate response is to go to God and praise the Lord. Prayer is how we become intimate with Jesus Christ, which is why Satan tries so earnestly to stop us from praying. Prayer will change us. Deepen our relationship with God, know him deeper too. Praying together shares a united purpose and builds a sense of community and solidarity. We ALL need God, prayer in group can lead to a spiritual breakthrough that we cannot imagine as we pray for one another and ourselves. "},{"id":23,"href":"/sermons/becoming-proper-worshipers-of-god/","title":"Becoming Proper Worshipers of God","section":"Sermons","content":"series: Anchored in hope, rising in faith\nverse: Daniel 1:1-21\nIn order for us to regain true joy, we must first earnestly strive for the restoration of worship. Joy begins with proper worship.\nHow can we become proper worshipers of God?\nProper worship begins with recognizing the risk of conformity.\nDaniel and his friends were forced to assimilate into Babylonian culture. They had to adapt to the Babylonian lifestyle, customs, etc. Even new names. We live in a time of spiritual captivity. We need to recognize and see this. We are surrounded by influences. It could take the shape of a work focused grindset community, or a friend group that makes racist remarks. Culture can so easily be focused on sin. We can\u0026rsquo;t worship God when we induldge in all of these sins and conform to the sinful culture that surrounds you. By recognizing the risk of the influence around us, we can rely on God and make changed to our lives. Basically, the first step to fighting sin is recognizing it. Proper risk is about resolving with the righteous decisions\nDaniel trusted the words of Jeremiah the Prophet. We are also in exile like Daniel. We don\u0026rsquo;t belong to this country or this world. We belong to the Kingdom of God. We need to depend on God, and constantly be aware of God\u0026rsquo;s provisions, protection, and control. We can prosper only through the dependence on God. The word of God exists to convict us, not to make us feel good. Reap the rewards of faithfulness. The steps to Proper Worship on Sundays\nBe here on time An enemy of this is by misplacing our values. We are bound by cultural values. Prepare your heart in prayer before worship. \u0026ldquo;God help me to worship you properly\u0026rdquo; You will start to thrive and experience joy because you are worshipping God properly. "},{"id":24,"href":"/sermons/the-meaning-of-christmas/","title":"The Meaning of Christmas","section":"Sermons","content":"series: Pastor Myung\nverse: Luke 1:26-56\nThe meaning of christmas:\nThe day that God showed us mercy. A day that God showed his faithfulness An important detail to recognize: Mary was afraid and felt inferior. But God empowered her saying that she is a child of God and to stand firm on your two feet.\nFor more context at this time for Israelites. They have been enslaved for generations. Egypt, assyria, Babylon, and now Rome. They were always proud and were persistent in their faith that everything will be okay. But Rome was an iron fist and people had some doubt over their situation.\nThe bible is the book of the covenant. It\u0026rsquo;s filled with promises made by God to us. The old testament has promises that are fulfilled in the new testament. Our faith is placed in the book that the promise of our salvation will be fulfilled\n"},{"id":25,"href":"/sermons/christmas-peace/","title":"Christmas Peace","section":"Sermons","content":"series: Psalm for suffering\nverse: Psalm 126\nThe true meaning of Christmas is the gift of Jesus Christ and his birth.\nOut greatest gift and dream is the eternal life that the one and only Jesus Christ died to grant. And this dream has already been actualized.\n"},{"id":26,"href":"/sermons/treasure-the-word/","title":"Treasure the Word","section":"Sermons","content":"series: Psalm for suffering\nverse: Psalm 119 the longest verse in the bible. It\u0026rsquo;s the written account of David and his devout faith.\nPeople want to make the \u0026ldquo;best\u0026rdquo; choice for themselves such as \u0026ldquo;what should we eat?\u0026rdquo;. But this created stress in our lives. But what\u0026rsquo;s a decision that we can never forget. It brings joy, peace, stability.\nFind delight in the word Dedictate your life to the word Look to the hopeful future and be present in the loment. Bottom line is to treasure the word of God. How can you treasure God when yoy don\u0026rsquo;t treasure the word? Treasuring the word, following the commandments, will help you to make the right decisions and run away from sin. Today\u0026rsquo;s societal climate makes reading in general, and also specifically the bible, a great struggle. We are so immersed in a culture of instant gratification. I really have to immerse myself in the word of God and absorb and be mindful of it. This is where we should derive our joy.\nThe commandments aren\u0026rsquo;t rules that prohibit us from doing things. It gives us a blueprint of leading a life of joy, comfort? and stability.\nDon\u0026rsquo;t forget to ask God to open our eyes to see the wonders of his word.\n"},{"id":27,"href":"/sermons/praying-our-envy/","title":"Praying Our Envy","section":"Sermons","content":"series: Psalm for suffering\nverse: Psalm 73\nAre you happy for others that do well for themselves or are you envious?\nThe heart of jealousy happens very often.\nDon\u0026rsquo;t get caught up in focusing on what you lack. Instead look towards what you do have. Envy is difficult to self actualize. We do it so often and we can become complacent to the feeling. As we get more discontent with ourselves, we become greedy, self pitying, and hyper critical of oneself.\nThe effect of envy is disastorous for us. One potential consequence is the struggle to love ourselves, our own bodies, even though we are made in God\u0026rsquo;s perfect image.\nHow can we deal with envy? Stop ignoring your negative emotions. Go to God and lay it all down, he can lift you back up. Recognize your brokenness instead if hiding from it.\nProsperity of the wicked: We can become resentful and angry when we see non followers of Christ prosper in life. \u0026ldquo;Why God do you bless these wicked people but not me?\u0026rdquo;. \u0026ldquo;What\u0026rsquo;s the point of folowing God and being so faithful if I don\u0026rsquo;t get to experience any blessings\u0026rdquo;. Until I went into the sanctuary of God. He went to God and worshipped the Lord. The author renewed his perspective on his state of life. He begins to understand the wisdom of God. The solution to envy is fear\u0026hellip; the fear of reverential awe of God. Respect God for his unconditional love and recognize his character. This is what it takes to genuinely worship God. This is the only way to truly experience God. On a side note, are you okay with being a passive listener? Or could you become an active participant and have fellowship within your church. You can create and provide a Christian experience through the way you worship the Lord. Pursue peace with a content heart. A man with no envy at all. The perfect man Jesus died on the cross for our sake. The death of Jeus shows us that God loves us unconditionally. The resurrection shows us that we can have hope in a new Earth. We don\u0026rsquo;t need to have discontent in our life because we are subject to comfort and peace in HeVen. God is always with us, and there is nothing else we need. How often are you joyous in anticipation for what is to come? Let your excitement during the Christmas season be a reminder to how our faithfulness in God\u0026rsquo;s timing should be a opportunity of joy instead of burden.\nFather thank yu for allowing us to reassess our hearts throgugh your sord. People are broken and hurt because of the jealousy of the prispeirty of others who are not followers of yoy Lord. We get confused and we wonder why don\u0026rsquo;t yoy grant this to us. But Lord you hVe shown again that our longings are not here YET. we will get to enjoy kuch more and for eternity when we enter heaven. Lord heal our hearts as we turn to your with our hearts of jealousy and envy. May we lay down our sins in front of you God. Would you restrengthen our faith and hope in you. Change our restlessness and joylessness to the beauty of joyfulness no matter the circstance we find ourselves in. Let us not be shaken by our environment but hold on to you dor you are all that we need and will keep us grounded.\n"},{"id":28,"href":"/sermons/from-brokenness-to-beauty/","title":"From Brokenness to Beauty","section":"Sermons","content":"series: Psalm for suffering\nverse: Psalm 51 Writer: King David Context: David was considered a man of God\u0026rsquo;s heart and poweful and wealthy. Considered a very righteous man. But he fell, he commited adultery with a married woman. Nathan a prophet convicts King David about his sin. The story of a rich man and a poor man who had just a single lamb that he cherished very much. Verse Analysis: The entire verse is a psalm of repentance. Three pleas:\nPurity -\u0026gt; Change begins with recognizing our own sin. Verse 1-6. He sees his own sin not through the lens of other people or society, but through the eyes of our Holy and righteous God. Put your mind on the Word of God. Admit your sin and take responsibility for your brokenness. How did David run away from his sin? He shifted blame such as when his general died at the hands of another army, when it was King David who put him there. King David blamed the circumstance, the temptation, the people, external factors, instead of himself. King David\u0026rsquo;s ultimate betrayal, though hurtful and harmful to the people the afflicted, the root of the issue is not submitting to God\u0026rsquo;s rule. He believed that he was unsatisfied with life, so he looked to external factors and coveted something he should not have. He betrayed a good and loving God. Renewal -\u0026gt; Verse 10-11: “Create in me a clean heart, O God, and renew a right spirit within me. Cast me not away from your presence, and take not your Holy Spirit from me\u0026quot;. David had to realign his heart and understand how continuous and steadfast God\u0026rsquo;s love for him was. He pleads for mercy and submits to God will. He saw God\u0026rsquo;s goodness. Restoration -\u0026gt; Verse 13 “Then I will teach transgressors your ways, and sinners will return to you\u0026quot;. He\u0026rsquo;s saying that he remains broken, he still goes through hardship, but I will help turn sinners to you. His change of heart extends beyond himself onto others. Don\u0026rsquo;t fall into the trap of thinking repentance leads you to beauty. It\u0026rsquo;s the brokenness that will lead you to the truth that is: God is what is good in life. When we look for transformations of our heart, we generally desire relief from brokenness. But instead we should use our weak and contrite heart to encourage others. We are not freed from brokenness, but God is with us in our brokenness. To be a beautiful flower amidst the dirt and gravel. May we practice repentance in the proper way to move from brokenness to beauty.\nPrayer: Father your know our pain, what we go through and how much we\u0026rsquo;re suffering. God we desire to be freed from this, yet it feels like an endless cycle of pain and sin. Thank you God for reminding us that your Good still prevails amongst our suffering and that there is a greater rxistence to look forward to after this life. You sent down your one and only Son to death to free us from death. You didn\u0026rsquo;t abandon us. God help us to remmeber that glory is coming, your mercy is greater than any of the sins we have in our lices. You are a good and loving God and may we trust in your faithfulness. Move hearts into repentance today and this week. Forgive us for desiring something else more than you. Forgive us for looking towards things of this world ocer your goodness and grace. Thank you God for loving and accpeting us so dearly. We lrya this all together jn Jesus name.\nHow can we move from brokenness to Beauty?\nRepentance But what truly is repentance? What does David do in Psalm 51 that shows how we can navigate through sinfulness.\n"},{"id":29,"href":"/posts/no-bullshit-guide-to-getting-your-life-back-together/","title":"No Bullshit Guide to Getting Your Life Back Together","section":"Blog","content":"Zero commentary, just tips.\nIntroduction # This guide is simply a small list of actionable decisions that you can make in your daily life to give your mind a break and your thoughts some clarity. It\u0026rsquo;s done wonders for my productivity and stopped the cycle of self-loathing.\nDelete all social media and clear out your notifications. Just try it for a week and you\u0026rsquo;ll realize how much you don\u0026rsquo;t need it. Stop looking at your damn phone so often. Charge all of your technology on your desk. Keep it away from your bed at all times. When you lay down to sleep, there should be no technology within an arms reach. As a bonus, this will force you to get out of bed when you turn off your alarm. Journal daily. It doesn\u0026rsquo;t have to be an extensive entry. Even a simple \u0026ldquo;highlight of the day\u0026rdquo; along with some habit tracking. Stop listening to music. It\u0026rsquo;s a relatively easy addiction to succumb to and it plagues our minds more than we would expect. Our brain is such a beautiful organ, and it enables us to have deep and emotional thoughts. Even if you\u0026rsquo;re having negative or \u0026ldquo;bad\u0026rdquo; thoughts, drowning them out with music will not do you any good. Process your emotions and let your thoughts carry out and finish. This is the healthiest way to be more mindful. Especially while driving, stop listening to music in the car and just sit with your thoughts and just pay attention to the road. Read books. Literally anything. Find something enjoyable whether it be a fictional mystery, biography, self help book, the bible, and just read. Reading and writing is the most important skill that we have. To let it go to waste is such a shame, and will be one of your most hurtful regrets. Reading is so powerful because of the way that we receive the information. We get to develop a relationship with the author and consume the content in the way they chose to present it. We delay our graitification and require focus and committment to feel the pleasure from a story. This starkly contrasts to the instant gratification of many pleasures of this world such as junk food, pornography, youtube, short-form video content, etc. for a good reason. Drink only water. It\u0026rsquo;s God\u0026rsquo;s gift and is the most nourishing for our bodies and soul. There\u0026rsquo;s a reason why we can drink water and go, \u0026ldquo;Yes this is what my body needed\u0026rdquo;, and yet not have that reaction to literally anything else. So keep a large water bottle with you at all times, at least 24 oz but preferably 32 oz. Get enough sleep. You should stop aiming for a certain number of hours, but enough for your body to not wake up tired. Another helpful tip is to set an alarm to go to bed, not to wake up. Take vitamins daily. Omega 3, vitamin C, vitamin D, magnesium, biotin, whatever it is that your body needs. Keep your desk and workspace clean. You feel more productive when your space is cleaned and minimal. Not sure how much research has gone into this but I can speak anecdotally that it\u0026rsquo;s true. I personally enjoy doing a 10-15 minute stretch every night. 4 deep breaths for every position and hit every major muscle group. Definitely do this if you exercised or sat in a chair for an extended period of time which is more than likely everyday for most of us. Take care of yourself and your appearance. Don\u0026rsquo;t forget to shave. Smell good. Maintain a nice hair cut. When you\u0026rsquo;re confident in yourself, you can be confident in what you do. It\u0026rsquo;ll inspire you to do more. "},{"id":30,"href":"/sermons/security-in-suffering/","title":"Security in Suffering","section":"Sermons","content":"series: Psalm for Suffering\nverse: Psalms 16 David calls out to God for refuge because he has been experiencing and dealing with various problems such as being a murderer and adulterer, and also bc of the sins of others such as those that seek to end his life. But note that David isn\u0026rsquo;t asking for an tagimmediate solution. Not a refuge in the sense of freedom of his problems, rather a security amidst danger. A refuge/security that cannot be shaken.\nThere are different kinds of struggles that we face.\nWhy do we need security that cannot be shaken\nBecause nothing on this earth lasts. There is no physical or intellectual foundation that we can base our security on. Emotional too, the death of a loved one can occur. We tend to choose what we can preserve the best because of our natural tendency to play by our strong point. For example: Beauty. Skin products, the way we look. So many people are conscious of what they look like. We try to delay how old we look as much as we can. What happens when we start building our lives on something that doesn\u0026rsquo;t last. Those who run after another god, will suffer more. Where do we find this security\nThe resurrection of Jesus. God promises that death will not be the end of us. You have to truly believe not just in your head but in your hearts. Do you believe in the physical and spiritual resurrection of Jesus. If you truly do, it changes your entire world view. Recognize it. Jesus resurrected. Understand that whatever he claims is the Truth. How can we experience this security\nRecognize that Jesus is our savior and that he truly rose from the dead. Through delight and fellowship of other believers. The true love of God and his character is manifested in the world through the people of God. Joy can be experienced in our lives through other believers in this way. This means that WE as individuals are so important to those around us. What we do within the church is so important. You can only experience the power and the love of God through other believers. You can see through the lives of others that God is truly good. Nobody is perfect but there are ways we can reflect the wuality and image of God that can encourage others to keep going. Be challenged to invest in your community groups. We will always have gluttony. After we seek out one little thing, there will be another that follows shortly. We are insatiable when it comes to earthly things. Thus we should stay grounded in Jesus, the only eternal thing. Prayer: God we thank you for helping us to see that nothing on this world lasts. We confess that every time we chase some kind of security within this world whether financial, popularity, wealth. We pray to you, help us to move away from that. To run after you. Help us Lord to experience the truthfulness of yor word. May your promise and power be manifested in us, as we seek you and delight in the fellowship of one another. God help us and be with us and bless us and may you grant us a security amidst our suffering. Amen.\n"},{"id":31,"href":"/sermons/praying-through-fear/","title":"Praying through Fear","section":"Sermons","content":"series: Psalm for suffering\nverse: Psalm 3 Context: David is old and he\u0026rsquo;s being chased by thousands of people. His life is crumbling around him. King David commited adultery and murdered her husband and did a lot of other wrongs. Fear is not a negative emotion by itself. It can have positive effects. In 1884, Soren Keurtigard says, \u0026ldquo;fear is the response to a specific identifiable danger or threat\u0026rdquo;. Fear of failure, fear of an angry bear\nThere are two types of responses to fear\nDenial Ventfully express it But we should respond to fear through prayer. Lay your fears down to God, face them in the presence of God. How can we pray through fear?\nPray our fears Bring to the Lord your fears. turn your attention from your situation to God\u0026rsquo;s protection Psalm 3:3 \u0026ldquo;Oh Lord you are a shield ABOUT me\u0026rdquo; It\u0026rsquo;s not a shield like captain america, but rather like a bubble. We should respond to God by facing the danger and fearful situation head on, fully trusting in him. See the substitute that God has given to us and for us, as confirmation that God\u0026rsquo;s words are truly the truth Psalm 3:4 Why do we experience with anxiety\nWe place our faith and identity in security that isn\u0026rsquo;t reliable. Don\u0026rsquo;t rely on yourself. Rely on Jesus. Anxiety has always existed, but today\u0026rsquo;s generation faces anxiety the most. How does david know and trust God? Verse 4:\nWhen youre afraid and have anxieties, forget yourself and focus on others. Move away fron yourself and start loving others in your community.\nDo not give up on trusting in God. Focus on being a blessing others, because you will find yourself to be blessed as well.\nFather we cofness that weare fragile anxious fearful people. So Good we thank you for reminding us of the truth that you are a caring loving trustworthy God. Hello us to identify the source of our worries and that we would place our identity in yoh so that our feelings and thogughts wiuld not control us. But instead we can choose to have confidence in God and his poeer as we\u0026rsquo;ve seen in the life of Jesus christ. Strengthen us to be a blessing to others and forget more about ourselves so we can expeirence the freedom from our fears snd anxieties. Thank you for being a faithful God that always keeps his promises.\n"},{"id":32,"href":"/sermons/the-soil-parable/","title":"The Soil Parable","section":"Sermons","content":"2024-10-11 series: college group\nverse: Mark 4:1-34 Parable of the 4 seeds. Jesus preaching to a big group.\nJesus is trying to teach his disciples: \u0026ldquo;The sower sows the Word\u0026rdquo;. The truth be spread and shared to many people.\nWe are all types of soil, one of four\nHear the truth but it has zero impact on them Rocky Soil - hear it but doesnt receive it Thorns - getting distracted with other desires and things. XX XX "},{"id":33,"href":"/sermons/a-call-to-prayer/","title":"A Call to Prayer","section":"Sermons","content":"series: Acting in grace together\nverse: James 5:13-20 Pray for one another. Don\u0026rsquo;t be afraid to ask for prayer in times of need.\nPrayer has the power to change lives. If anyone is suffering in any capacity, let that man pray. Are there differences in who prays for us? The prayer of a righteous person has a great impact. \u0026ldquo;Is anyone among you sick, so sick that the body the church cannot pray for you. Call for the elders, the leaders of the church, to come pray for you.\u0026rdquo;\n\u0026ldquo;Confess your sins to one another and pray for one another.\u0026rdquo; When you pray with one another, you can be forgiven by God and also experience spiritual restoration.\nWhy is our prayer not always answered or delayed? Our God knows what\u0026rsquo;s best for us. Sometimes the healing of our problems is not the solution. We have to acknowledge that we are not in control. Imagine you as a child asked for things and your parents said \u0026ldquo;yes\u0026rdquo; every single time. This would be a terrible situation. This is the same relationship we have with God. God will not always say \u0026ldquo;Yes\u0026rdquo;.\nWhy does James call us to pray to God then? It\u0026rsquo;s because when we pray to God, it aligns our hearts to the will of God. We acknowledge that God is better than us and takes away our pride. We acknowledge that God is better than us. We are not our own God.\nWhat\u0026rsquo;s the impact of prayer? A good life. There are those that pray fervantly and continuously over our well-being, for our peace, for our healing. There is no guarantee that the suffering will go away, but we will find joy and peace amidst our suffering. It will also strengthen us to endure in our trials.\nA righteous person doesn\u0026rsquo;t mean we have to be a perfect person Sinful people can also be righteous. Elijah was sinful, insecure, and had a lot of worries. And yet his prayer worked because he prayed continuously and earnestly. Sickness and prayer are related. Perhaps God is keeping us sick so that we can grow closer to gim.\nTherr is power when we pray and cry out together. Completely open and weap. God we need you. God now I really desire for you to work in my life.\n==I need to pray daily and fervantly for those around me==\nPrayer: God we thank you for reminding us of how poweful prayer can be. Lord we confess together: we are so stupid sometimes, not acknowledging how powerful prayer is. Being decived by the enemy to not pray regularly and not put prayer as a priority in our lives. You\u0026rsquo;ve shown us how much prayer really matters. God could you burn our hearts with such passion for your kingdom. That we would become people that dont just pray in suffeeing but also in times of rejoicing. Yoy are a s overign faithful all knowing powerful God who is always always fulfilling your perfect will. So god we want to thank you and we ask you to give us the confidence to not be ashamed to be a fervant prayers.\n"},{"id":34,"href":"/sermons/patience/","title":"Patience","section":"Sermons","content":"series: Acting in grace together\nverse: James 5:7-12 Be patient. Some of you may not be wealthy, maybe suffering, maybe oppressed. But god is exhorting them to be patient.\nWe seek immediate gratification. We are products impatient\nPatience -\u0026gt; graciousness and steadiness at the face of delayed gratifications.\nPatience can also mean: Long suffering and remaining steadfast and endure and presevere.\nNot stoicism. It\u0026rsquo;s not about willpower to withstand irritation. It\u0026rsquo;s deeper and more than that.\nStoics that try not to be overwhelmed, relies on your own self. It\u0026rsquo;s not gonna work every time. If you rely on oneself, it\u0026rsquo;s not gonna work everytime. So when you do inevitably fail, you have nobody to blame but yourself.\nHupimenoh - endurance despite what im going through.\nThe story of Job: He lived righteously. He was wealthy, healthy, and basically just thriving. He was almost a perfect role model of a good Christian. But Satan comes and tests him by stripping him of every material thing he has. Patience is enduring and believing that God is still compassionate, merciful, and that he has a perfect will. This is the kind of patience that James is talking about. Not the suprression of your feelings.\nBe patient until the coming of the Lord. His kingdom will be established, no more suffering or tears\nWhat is the opposite of patience? Grumbling. Complaint. Selfpity. The absense of peace creates destruction within us. When you have self pity, and keep thinking about yourself, you will be totally self centered. The outcome of having this self centered mindset, is the destruction of your own life and the lives of others. You no longer put a focus on to others but only yourself.\nPatience creates peace and rest within us. We can be patient mids\n"},{"id":35,"href":"/sermons/the-danger-of-wealth/","title":"The Danger of Wealth","section":"Sermons","content":"series: Acting in grace together\nverse: James 5:1-6 Your riches will spoil and your coins will corrode. You kept your own pockets fat at the expense of those that work for you.\nWho is James condemning?\nJames is addressing to a particular group of people: Christians. He\u0026rsquo;s talking about a majority of people in the church. The issue is the abuse of wealth. Hoarding it instead of using it for the glory of God. Hoarding is different than saving. Saving is encouraged by the Bible. It makes good stewards. Hoarding is accumulating so much wealth, more than necessary. Are you trying to accumulate wealth so that you can have control over your life? Trust in God, not in wealth. What are the dangers of wealth?\nWealth has a poweful potential to ignore God and the needs of others. Verse 5 says: \u0026ldquo;You have lived your life on earth in luxury and in self-indulgence\u0026hellip;\u0026rdquo; The Bible rebukes money so many times because it\u0026rsquo;s so powerful and will lead us to make paths that will lead to our downfall. It\u0026rsquo;s deceptive because it seems to fulfill security, creates an identity and a sense of fulfillment Jesus says,\u0026ldquo;when you need to pray, this is how you should pray: Father in Heaven hallow be your name\u0026hellip; give us today your daily bread\u0026rdquo;. You shouldn\u0026rsquo;t worry about \u0026ldquo;having enough to be Good/secure for the future\u0026rdquo;. This happens when we place our faith and trust into money instead of God. It\u0026rsquo;s a pathway to self destruction. Wealth has blinded people from the needs of other people. When you invest more into yourself than others, you are following the pathway of accumulating more wealth, that trusts money more than God. Another sign is this: giving sacrificially and generously is an option instead of a priority. Another sign: wealth leads to oppression and injustice of poor people. We are responsible before God to use the wealth that God has provided us with to bless others. God\u0026rsquo;s will and plan is for the needs and sake of others. Paradigm shift: Serving others before yourself. How do we not fall into these traps?\nMatthew 6:33 Prioritize others before yourself. Stop thinking and talking about your faith. Be a doer. Remember that Jesus willingly gave his Life in exchange of our abundant life. Trust upon the ways of God. Look toward eternity. Some questions to think about: How is god leading you to change your spending and saving pattern? How is God leading you to give more to eternal matters? The gospel and care of others\u0026rsquo; needs. Are you trying to evaluate whether your money is being spent in a good way? Would you open up our eyes again to see what Jesus has done, so that we can really live a life of abundance that we\u0026rsquo;re looking for. The abundance of Jesus instead of money. That we would live out our lives as sacrificial and generous people. That seeks to comfort and tend to the needs of others. God transform us, move our hearts and lead us closer to you. Even if it means following Jesus to the end of our days. Help us not t o lose faith and hold on to your truth. Glory is coming. That we may be people rhat act in grace together by being generous to one another for the sake of the gospel.\n"},{"id":36,"href":"/sermons/the-cure-for-worries/","title":"The Cure for Worries","section":"Sermons","content":"series: Acting in grace together\nverse: James 4:13-17 Do not be arrogant. Don\u0026rsquo;t boast about tomorrow. Don\u0026rsquo;t talk about doing this or that, just do it. Whatever God wills you to do, just take action.\nWe often become so worried and stressed when things don\u0026rsquo;t go as we plan. How can we deal with this?\nWhat causes worries?\nForgetting God in our daily lives. Planning without God in mind. The most prevalent and common sin. Whne we forget God in the daily operation of our life, we assume the role of God in ourselves. \u0026ldquo;I know whats going to happent tomorrow\u0026rdquo;. This leads to an expectation of a certain reality that may not come true. WE DONT KNOW WHAT TOMORROW WILL BRING. Leave it all in the hands of God. When plans go well we feel superior, and when they dont we feel inferior. What is the cure?\nWhen we put God into our daily picture and say \u0026ldquo;Lord I don\u0026rsquo;t know, help me\u0026rdquo; You will still have anxiety and worries, but it won\u0026rsquo;t be destructive. We would be disappointed in how things turn out, but we won\u0026rsquo;t fight internally with ourselves. \u0026ldquo;If the Lord wills, we will live\u0026rdquo; Every moment we are breathing is the grace of God. We don\u0026rsquo;t deserve life. We\u0026rsquo;ve done so many things that have destroyed our relationship with God. God is not going to lead you to do anything. You can\u0026rsquo;t say \u0026ldquo;God is lesding me to do \u0026hellip;\u0026rdquo; or \u0026ldquo;If God wills it\u0026hellip;\u0026rdquo; or \u0026ldquo;Lord willing\u0026hellip;\u0026rdquo; This means you are blocking your own responsibility, and also undermining the other person\u0026rsquo;s sense of purpose. Instead, look at your life, it is by God\u0026rsquo;s grace that we are alive, that he has led me to all these places. Appreciate everything that we have and attribute it to God. God is the source behind all of the good things in our life. Thank you for the safe drive home, thank you for the amazing work that I\u0026rsquo;ve done today. We can truly rely on God and be thankful. What is the role of community?\nWithout a community, we can\u0026rsquo;t remember the truth that our lives are because of God\u0026rsquo;s grace. No human on Earth is holy. We don\u0026rsquo;t pray in every moment, we skip reading the bible,etc. Surround yourself with fellow stewards that will serve as reminders for this truth. May you continuously feel the blessings from God to empower you to be a blessing onto others. "},{"id":37,"href":"/sermons/a-community-of-peace-part-2/","title":"A Community of Peace part 2","section":"Sermons","content":"series: Acting in grace together\nverse: James 4:1-12 How to build gospel centered communities. Last week we learned we need wisdom, especially to deal with conflicts.\nWe all desire change, to be better. We want to be people that are reliable and can make a positive impact. You get to experience this change, only when you become a peacemaker. When you live in close community with other christians.\nThe problem of communities:\nThey can be hurtful. As James 4:1 says, what causes quarrels? That our passions are at war within us. What kind of passions? Basically any desire, such as material goods, or our own well being. Stop focusing on yourself, and dedicate your life to others. Look at your family, someone had to dedicate their time, money, effort, in order to nurture you. When nobody cares for you, you are hopeless. That is Hell. The solution: God opposes the proud, but gives grace to the humble. Stop operating with your own desires \u0026ldquo;You matter more than anyone else\u0026rdquo;. NOT TRUE. stop being individualistic. You matter just as much as others. Stop prioritizing yourself and serve others. When you give to others, you\u0026rsquo;re gaining life. When you try to gain life, you are experiencing spiritual death. Submit to God, and operate in the ways of Him instead of man. Trust in what God says and do what he tells you to do. How can we experience a truly peaceful community together.\nThe devil wull do everything in its power to destroy communities. He will hinder us from humbling ourselves and submitting to God. When we follow others that are not God, you will destroy the community. RESIST the devil. RESIST him. The enemy is so powerful. Don\u0026rsquo;t be afraid of the devil.\nHumulity is not thinking of your self as lesser, but thinking of your self fewer.\n"},{"id":38,"href":"/sermons/a-community-of-peace/","title":"A Community of Peace","section":"Sermons","content":"series: Acting in grace together\nverse: James 3:13-18 Peace makes peace\nWhat is wisdom\nFearing the Lord According to verse 13, Wisdom is not just known, but is shown. \u0026ldquo;Let him show his works in the meekness of wisdom.\u0026rdquo; Wisdom is Pure - Morally blameless Peaceable - people who dislike conflict. Put reconciliation into action. Means to work with others even though it\u0026rsquo;s hard. Gentleness - As you hear good arguments, that you are willing to change. Flexible, yielding to others. Open to reason - Persuadable, a good listener Full of mercy - Taking your resources and putting it to use for others in need. Impartial - Show dignity and respect to all people, because we are all created in the image of God. Sincere - Integrity, be wise in public and in private. We must show these things if you want to be wise. When we are wise, people will come to you, they will be drawn to these characteristics. How can we implement it When we don\u0026rsquo;t feel satisfied, we are constantly looking for something to make us feel content. Our life feels unsettled and dissatisfied This will lead to all kinds of evil and addictions. We find ourseleves doing things we shouldn\u0026rsquo;t be so that we can be \u0026ldquo;content\u0026rdquo;.\nDo not follow earthly wisdom, money and possessions will not satisfy you. This will only lead to more discontent and chaos.\nDo not have an unsettled heart. To escape this, we must possess heavenly wisdom. Humble yourself and accept that God knows better than you. Accept the fact that he has the perfect answer for you.\nIf we pursue the will of God, we will have righteousness and peace.\nWhat does God want when we\u0026rsquo;re in conflict with one another. Resolution and peace. But how can we achieve this practically. When we are in conflict because of our pride and our unsettled heart, we have to become wise people.\nWe can become wiser by surrounding yourself with wise people.\nPur communities are prone to chaos ans conflicts becuse we are broken sinful people.\nWhile we can speka thousands and millions if words to each other, just one evil word can poison it and dedyory it fully.\nLook upon Jesus, and you can see what true wisdom looks like. There\u0026rsquo;s a gap of thousands of years, but his works still apply.\nIt costs nothing to be wise. If you seek wisdom, just ask for it. Just go to Jesus and ask for it. We don\u0026rsquo;t have to earn God\u0026rsquo;s favor, by grace through faith, we can ask.\nWhat drives your ambitions? Are you trying to build YOUR own kingdom? or the kingdom of God.\nAre you making peace in your community? How is God moving you to be gentle and open. How does he convict you to show this wisdom to others.\nWhat can you do to promote more unity and peace in your cgs.\n"},{"id":39,"href":"/sermons/stop-weaponizing-your-tongue/","title":"Stop Weaponizing your Tongue","section":"Sermons","content":"series: Acting in grace together\nverse: James 3:1-12 Importance of words and our tongue.\nWords are incredibly powerful and have a life long lasting impact.\nNo matter how good a person might be, our natural tendency is to speak evil than good.\nWhy are words so powerful?\nVerse 6 Words penetrate both the hearer and the speaker. Words can destroy a life because of its lasting impact. When someone curses someone, their words will sometimes turn into action. WORDS are ACTIONS When people bless you with their tongues, they often also bless you with their actions. What do words reveal about ourselves?\nWhatever comes out of your mouth comes from the heart.It reveals who we truly are. Your words can control the direction of your life. It can alter the way we perceive the world. We bless people with our tongue, and also curse people with it. How can we transform our tongues to heal not only others but also ourselves\nWe can\u0026rsquo;t do it on your own. Just because we try to follow a list of rules, doesn\u0026rsquo;t mean we would abide by it. We need a change of heart. Our words are an outward reflection of our heart. Continually hear God\u0026rsquo;s loving words that are directed at us. And likewise, we must praise God with our words. Become comfortable with using our words for God. "},{"id":40,"href":"/docs/notes/university-notes/software-engineering/","title":"software engineering","section":"University Notes","content":" Modern Software Engineering (8/20) # What is the point of software engineering? What does it fix? The problem with software development in the past: Late Too expensive Poor quality And less functional than promised. The internet was first born in the early 1970s. Mid 1990s, the web came ot be. Modern Software Engineering (8/22) # Waterfall life cycle model is evil, much worse than agile methodology. It was the method used for centuries before technology existed. What is the fundamental problem with building projects? Poor project management Do not use good engineering practices. Example: waterfall methodology The waterfall methodology is popular, but this life cycle model doesn\u0026rsquo;t work because of one key issue, that the requirements KEEP CHANGING. Waterfall assumes that the requirements don\u0026rsquo;t change. project efficiency - described as a project being on time and within budget. A low failure rate of software projects is not a direct indication of success or product quality. If only 1% of projects fail, it may indicate that not enough risks are being taken. Multicore is usually better for performance, but there are edge cases where this is not the case. In situations like these, it\u0026rsquo;s better to go back to singlecore and use rate monotonic analysis. Be careful with the decisions you make especially when trying to prioritize speed. It is not worth it to deliver poor quality work at the price of speed. Some random shit (8/27) # What is devops # Getting the users involved with the developer team to find what works and what doesn\u0026rsquo;t. How to avoid the typical mistakes: # Identify problems that have occured in previous projects that have a similar goal to your project. Discuss major mistakes that were made with other people, whether coworkers in different departments, or even friends in the industry. Create a checklist of mistakes to be mindful of. Hopefully they don\u0026rsquo;t get checked off Create a list of mistakes to AVOID during planning and monitor cautiously. Create a watchdog, an alarm so to speak, to sound whenever your proect starts leaning toward a mistake. Essential vs Accidental Complexity # Any project has a certain aspect of essential complexity, it is just intrinsic to the stuff that we do.\nAccidental is not intrinsic to the problem, but sometimes it\u0026rsquo;s necessary.\n(8/29) # Lessons Learned from Historic Cases # Boeing\nThey got a larger engine that was more powerful but it caused issues with the plane during flight. To combat this, engineers created radars and scanners to detect when the plane is in danger, but it was an optional feature that many engineers did not opt to install because it cost extra. This meant that there was only one point of failure. Furthermore, there was new software that would take control of the plane to correct its sterring, but this feature was not known to many pilots, causing major panic in those situations to the pilots that did not understand why they could not fly their plane. Bob Martin\u0026rsquo;s lessons learned: When our mistakes may cause injury, loss, or death, it is up to us to ensure the upmost safety. Healthcare.gov # There were a lot of separate teams that worked on different pieces. The lack of communication between these teams contributed to poor development. Originally, they had a very short timeline, but the requirements of the project kept increasing, while keeping the time-line the same. Their solution to reaching the deadline was adding more engineers that did not necessarily help. Part of the problem was that, there was nobody in charge (nobody was responsible for this disaster). There\u0026rsquo;s supposed to be test cases for each of the features, but there was poor testing, and not a full implementation of the features. So when they actually ran tests, they failed almost every single one. Some issues were, could not handle the load Security issues Clear text. Volunteers from Silicon valley fixed the issues in 1/10 the time with 1/10 the resources. When you have a big project where you expect many users, there NEEDS to be a dashboard. Also, when you want to build a big project with many users, you have to incrementally scale it and fix it as you go. Just because you use the word sprint, does not indicate the use of agile methodologies. Root causes of failure: The time frame must be well established, and modified when necessary Requirements can change, be quick on your feet. No effective planning Poor integration strategy (lax oversight of contractors). London Ambulance Service # War between management and reunions Skipped a lot of steps in the testing protocols Relates to the quality culture. When we have a culture that doesn\u0026rsquo;t prioritize quality, then you won\u0026rsquo;t get it. This led to many deaths in London because of the delay in ambulance services. In 1992, GPS and the web did not exist. They wanted a computer aided system where the driver could say, \u0026ldquo;This is where I am, where should I go\u0026rdquo; One issue: They used single shot implementation (waterfall). If any feature did not expect to be completed by the 8 Jan 1992 deadline would be scrapped. Another issue: the original team of workers in 1992 had no experience in building dispatch systems. The 1996 team was filled with members from midland that DID have experience. The 1992 project did not use the PRINCE method, but not only that, they did not have the proper culture. The root cause was bad management There was also just a major lack of testing. In 1996, all of the stages were completed in small increments. The project started as a simple call-taking one. At each stage, it was thoroughly tested. London Stock Exchange # This project was extremely over budget and late They were just really bad at managing the escalation. bad at estimating the cost and time. They wanted to have a concrete outline within 2 months, but didn\u0026rsquo;t have one years. There were people that were on the project that had poor interests for the project. They were sabotaging and stopping the project from coming to fruition. The LSE set an ambitious timescale of 18 months, they allowed politics to take precedence over technical rationality. Solution: Taurus renamed CREST arround 1993 and was taken over by England. They decided to implement a central registry of shares (the decision that would\u0026rsquo;ve cost many banks money). The \u0026ldquo;big hammer\u0026rdquo; Put their foot down and made the obviously correct decision. Toyota # I wrote about this in my homework, you already know Agile Methods (9/3) # Agile: a method that supports responding raipdly to changing requirements Scrum is one method of Agile.\nThere are significant differences in the methods. Scrum is the most widely used method, and also the 2nd most simple. The most simple is \u0026hellip;. (I FORGOT) There\u0026rsquo;s 12 principles for the agile methodology. If you notice in healthcare.gov incident, we had a bunch of different sprints, but it was the waterfall lifecycle split into chunks.\nWhat does agile address? # Requirement volatility. If you look at failed projects, one of the leading causes is high requrement volatility. Heavy-weight documentation Agile moves away from that to simplify things. Not collaborating with stakeholders to find out what the problem is and fix it. They have a focus on communication with customers and people Poor communication within the team Smaller teams are preferred to enhance communication Poor estimating and planning Agile says that we will constantly work on the customer\u0026rsquo;s number 1 issue at every iteration. The customer controls the schedule and the functionality, but they cannot control how much of it gets done.\nAgile manifesto # We value:\nIndividuals and interactions This means confident and competent people working as members of effective teams. Working software over comprehensive documentation If you\u0026rsquo;re writnig over thousands of pages of documentation for your code, it\u0026rsquo;s not going to have much value. Obviously we need to write down the requirements or a formal specification, we may get a lot of documentation for a small amount of code. HOWEVER, there should not be thousands of pages of design spec. Sometimes the design spec won\u0026rsquo;t even match the code that was written because the code changed, but the design spec wasn\u0026rsquo;t update. The design spec and the code can become out of sync, rendering the design spec useless. Customer collaboration over contract negotiation. Would you rather work with a third-party lawyer and work with contracts, or collaborate directly with the customer. The customer is our ally, not an enemy. Responding to change over following a plan Having a plan is good. But the type of plan for an agile project is different Requirements change, and when things change, we need to change our plan. One of the issues was that agile was too process oriented. Principles of the Manifesto # ==The highest priority is to SATISFY the customer by providing valuable and real products that they find satisfactory. == How do we know it\u0026rsquo;s valuable? Early and continuous delivery. Deliver the customer software early and allow them to see the iterations. We welcome changes in the requirements. We just say, man that\u0026rsquo;s just how it is, we\u0026rsquo;ll do our best. Deliver working software FREQUENTLY, from a couple of weeks to a couple of months. We prefer shorter timescales. These iterations are usually around 2 weeks, we will rarely see an iteration length of a month. Bulid a project around motivated people. We give them interesting work and the environment and support that they need. Most effective way of communicating is through face to face conversation. This was the philosophy back then in 2001. A lot of virtual teams exist and perform remotely. But face-to-face is generally the best. The primary way of measuring progress is via working software and the implementation of new features. Sustainable development We want to avoid burnout. Avoid 60 hour work weeks. We want to create a culture of sustainable work. Make it easier to change the software. Pay really good attention to excellence. Good design will enchance agility. A well designed software is easier to change. Refactoring is cleaning up the code base. Simplicity - Don\u0026rsquo;t solve a problem you don\u0026rsquo;t have. \u0026ldquo;At some point, we are going to have some variant of this same problem, should i start strategizing and figure out how to generalize my solution to fit other future problems?\u0026rdquo; Nah bro, just eat that first bullet and fix the code. The art of maximizing the amount of work not done is essential. The best architectures, requirements, and designs emerge from self-organizing teams. One of the things we want to do early in the lifestyle is think about the architecture. ==The architecture is not really emerging, it should preemtively be made, and then slightly iterated== At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. Basically just be self-aware and self-crtitical, individually and on a team basis. Different projects need different methodologies # ![[Pasted image 20240903165001.png]] The more important the stake/criticality, the higher up on the Y axis. When the stakes are higher, we must be more and more thorough with our operation. Review every change, test a bunch, multiple points of failure, etc.\nYou have got to be dilligent when the consequences are potentially more disasterous.\nSix Sweet Spots (2001) # Dedicated developer?\nSomeone that dedicates 100% of their time to the project, full time. Multi-tasking is not encouraged in software development. You cannot interupt your thought process deliberately, especially multiple times. It is basically an unspoken law to only be assigned one task or project at a time. Experienced developer? 10,000 hours (~5 years) of experience. Agile cannot fix inexperienced novice workers. Agile is best with smaller teams of EXPERIENCED workers. You can have a few novices, but not a team full of them. Small co-located team? 7 + or - 2 members (basically less than 10) Visible, audible, isolated, same physical space. Tools to support testing and configuration management Doing multiple tests many times perday to see if any changes you\u0026rsquo;ve made may have potentially accidentally broken something. Easy access to uses to respond to their requests Basically we need to continuously interact with customers and users. Scrum(9/5) # Scrum (The most popular agile method) # Frequently hybridized and expanded on with other methods. No technical aspects, only project management.\nLife Cycle # Product backlog -\u0026gt; Sprint backlog -\u0026gt; work on this iteration for 2-4 weeks, where everyday the team discuss -\u0026gt; at the end of the iteration, you have a shippable increment of the product.\nTeam Members # product master responsible for maximizing the value of the product resulting from the work. order (prioritize) the Product Backlog items. communicate the Product Goal. it is important that there is only ONE person as a product master. No conflicts. scrum master leadership role, advisor like but has no management authority over the team helps resolve impediments keeps people organized? ==Search up the difference == developers Gotta do your work man Incompetent members will get hounded on 5-9 members ideally. Less than 10 typically Within the team, there is no hierarchy, everyone just works.\nSprints # Fixed length of time to work on a goal\nThe iterations are short, most commonly two weeks as of today You cannot change the requirements DURING a sprint. Because of this, even if the Product Owner wants to change the priority, they must wait to mention this until the next meeting. A sprint can be cancelled with the Product Goal becomes obsolete. Only one person can do this, the Product OWNER. Sprint Goal - What makes the sprint valuable? Daily Scrum # Timeboxed 15 minutes, cannot go over it no matter what. Carefully consider the progress being made Adapt the Sprint Backlog as necessary, and adjust the upcoming planned work.\nThree main questions:\nWhat did you do since the last Scrum? What got in your way? Only list the problems, don\u0026rsquo;t try to solve the problems. What are you going to do before the next Scrum? Sprint Review # Conduct a review to inspect the current status and outcome and adjust accordingly. Timeboxed to a max of 4 hours for a one-month sprint (one hour per week?) Rapid feedback on building the product. Product Backlog # The master list of everything that is needed to be created or improved in a product. Product Backlog Refinement - breaking down and defining items into smaller more precises items. Product Goal # Describes a future state of the product which can serve as a target This goal is in the Product Backlog User Story # Is simply a prmoise to have a discussion; not every detail needs to be included. Describes functionality that will be valuable to either a user or purcahser of a system. Card - written descriptoin of the story Conversation - about the story taht serve to flesh out the details of the story Confirmation - details that can be used to determine when a story is COMPLETE. User stories should be INVEST: Independent - avoid dependencies between stories Negotiable - details are negotiable Valuable - valuable to everyone (users and developers) Estimable - reasonably confident that they can estimate the story Small - story can be completed in a single sprint with \u0026lt; 25% of the team Testable - test should satisfy the Product Owner Architecture Breaker # Having to recreate the architecture The architecture is mostly not driven by functional requirements. The user stories are funciotnal requirements, they\u0026rsquo;re what the softwrae neds to do Architecture is driven by the non functoinal requirementsl ike availabity performance security and usability and things like that spanh hgue chunks of the system so if you break something there, then you got to change big chunks of the software in order to fix it. you dont want totry to do all of the architecture work up front, but at least enought (walking skeleton) to understand the big impacts of the design decisions you\u0026rsquo;re making. if you look at just this part of this stimulus response thread, and then another part, but then in combination the performance is awful. if you do a skinny little skeleton, you could look at the performance from end to end in totality and decide accordinigly. Focusing on the architecutre early in the project, frequently line up as being a useful way of spending your time. create a strong foundation of the architecture and infrastructure early on first, and then afterward start building business value. Splitting stories (not on exam) # Cross cutting conerns mixed priority things Tech Stories # Try to avoid tech stories, but you may not be able to Sometimes you can express a tech story in such a way that the customer understands that value that they are getting out of it, sometimes you can\u0026rsquo;t. stuff that needs to be done, but may not be that the user cares about directly. Some tmies you can hide a tech story, inside of othe ruser stories, so you can address the tech story underneath the surface, of things the user actually DOES care about. Sometimes you need to create a list of tech stories that you keep around and work on when you can. These suggestions come from a book called \u0026ldquo;scrum and xp from the trenches.\u0026rdquo; wtf i don\u0026rsquo;t know. If you decide that you\u0026rsquo;re interested in agile read this book. Division of Concerns # Setting the relative importance of requireemnts and the estimates for doing the work are divided. Everyone on the team is involved in estimating every story- builds common understanding. Planning Poker # As the user story gets bigger, the accuracy of estimation worsens. A size of 20 may not fit in a sprint, but a 40 will definitely not fit in a sprint. The typical story is usually 5. A story with 0 is something that is low friction and easy. One minute of work. Aggregating expert judgment Scrum Cont. (9/10) # Random tangent: Slow is smooth, smooth is fast. Essentially the main idea is to take things slow. Plan, be careful, don\u0026rsquo;t rush or else you\u0026rsquo;re cooked.\nRe-estimating # When the size of a story has changed, you need to adjust accordingly. If can be smaller or larger than expected. With experience, you will begin to get better at relative estimation.\nSprint Backlog and Sprint Goal # The Sprint Goal: what are we trying to accomplish this iteration. This overarching motif. Summarizes what we are doing in a single statement.\nStories and Tasks # A task is a broken down component of a story. Stories - DELIVERABLE progress that the Product Owner CARES about Tasks - Non-deliverable stuff that the Product Owner doesn\u0026rsquo;t care about. We don\u0026rsquo;t need to fill in the Product Owner about tasks, they\u0026rsquo;re just things to be mindful of as we make progress.\nDefinition of Done # How can I know when I\u0026rsquo;ve generated a good set of test cases:\nIt\u0026rsquo;s gotta cover all of the requirements. MCDC Testing The definition of done is when the state of the increment reaches the measure of quality it is required. WTF is the point of this slide. Why Scrum is powerful # Communication, low-overhead, makes problems visible, puts responsibility on people\nNo silver bullet # Though it\u0026rsquo;s easier to find problems, obviously we still have to solve them. You still need to do good work to solve hard problems.\nDoes Agile Fit your needs? # Really dynamic A culture that thrives off of chaos Smaller number of personnel Low criticality Less intern type roles, and more high level positions. Barriers to the Success of Agile # Customer that doesn\u0026rsquo;t want to work with you, they\u0026rsquo;re going to make a big requirement spec and figure it out without input from the programmers.\nProgrammers can actually choose who to work with. Bad customers won\u0026rsquo;t get service. \u0026ldquo;We don\u0026rsquo;t have the resources to help you at this current time\u0026rdquo;.\nOnly do this when you have the luxury A culture that overworks the employees and expects too much of them\nOne common issue is death-marks projects, where a PM will claim that a project\u0026rsquo;s performance will either cause the company to fail or survive. This sort of culture causes burn out. Requirements (9/10) # Communication is key, make sure you can talk to the end users and understand the requirements that they desire. Also you need to be able to talk to other developers.\nMake sure you spend enough time before you even write a single line of code. Make sure you have the architecture, requirements, design, implementation, etc. fully understood.\nperspectives on dealing with requirements System analysts use UML and other stuff Professor really like iterative development There\u0026rsquo;s mayn ways to deal with requirements problems. Why do we have so many requirements issues in our projects?\nSome solutions to common problems The GOLDEN standard: talk to the customers, users, and others.\nrealize what the issue is support them and show that you care Derived Requirement vs Requirement Derived - are derived from the engieners as a result of the requirements analysis.\n==Functional vs nonfunctional requirement on exam== # Functional - something the engineer has gotta do. You can build a module that implements that particular feature, but non-functional are quality attributes. Nonfunctional- some constraint such as response time, performance, security. They include quality attributes, the primary drivers of the architecture Requirement Eliciation # Basically figuring out what the customer wants and needs. Most importnatly you must talk to the stakeholders. How can we talk to other people comfortably?\nyo fill the in between # Requirements Defects # These errors are the most expensive to fix DURING production, but cheapest BEFORE production. Missing requirements are obviously the hardest to fix because they dont exist. Therefore, we should constantly be iteritvely updating the requirement list and keep checking for stuff that\u0026rsquo;s missing. Characteristics of Good Individual Requirements # Unambiguous Easy to understand Consistent Dont conflict with other erquirements Complete dont need to add more stuff Singular shouldn\u0026rsquo;t need conjunctions Feasibile Possible to do given current tech Traceable Should be able to trace during design, test requirements, etc. Verifiable Demonstrate that the system satisfies this requirement. Characteristics of Good SET of Requirements # Complete Should contain everything pertinent Consistent Same terminology, no duplicatoins / double dipping Affordable and Bounded Set the scope of the work In practice, because of complexity of the system, it is impossible to produce a complete and consistent requirements document. But the goal is to get as close to this as possible Trying to come up with a detailed requirement specification that is complete and consistent is in practical purposes not likely to achieve. Because one day you\u0026rsquo;ll find yourself to fall short.\nGause and Weinberg on ambiguity\nRequirements Jargon: Shall # Requirements are mandatory binding provisions and shall use shall. Statements of fact are non-mandatory so use will. Preferences are desired but non-mandatory use should. Suggestions use may. Don\u0026rsquo;t use must because of posible misinterpretation. Use positive statements and avoid negative requirements such as \u0026ldquo;shall not\u0026rdquo;. Use an active, avoid usign passive voice such as \u0026ldquo;shall be able to select\u0026rdquo;.\nObject-Oriented Requirements # You can generate a specificatoin that is object oriented, but those will likely be derived requirements of what the customer needs. When doing OO design and generate ues cases, those are not an object oriented artifcat\nUse Cases Document Requirements # a use case is a set of scenarios that describe some usage of the system. let\u0026rsquo;s say you\u0026rsquo;re building an automated cash register. One of the 20 use cases is processing a sale, and it\u0026rsquo;s without a doubt the most important feature. The use case is the set of steps that discuss the actions of the actors and the system.\nUse case diagrams # Not super clear all the time, not preferred by Paulky.\nActors # Not a part of the system we are building, but they use it. Basically inheritance: We have generealization and specialization. Actors must be specified sometimes. Instead of just medical staff, we can say physician and nurse. Be specific\nFinding Use cases # not superh ard. think about the custoemr and what they need.\nUse Case Context Diagram # Prmiary actors on the left, supporting on the right. ![[Pasted image 20240917164432.png]] When we start talking about selling alcoholic beverages, there\u0026rsquo;s more context to this. We have extensions for alcoholic use case. Stereotypes that require more context.\nLarman\u0026rsquo;s Fully Dressed Use Case # There\u0026rsquo;s a bunch of diff templates that are all p similar. We are gonna use Larman\u0026rsquo;s because that\u0026rsquo;s the one in the textbook. Subfunction -\u0026gt; dividing the use case into smaller pieces. (Divide and conquer) Primary actor -\u0026gt; Calls on the system to deliver its services.\nIn a scenario where we have a customer and a bank teller and a withdrawal of money, who is the primary actor? the primary actor is actually the teller, they\u0026rsquo;re the ones utilizing the system to get the money. if the customer were to use an ATM, it would be the customer. It\u0026rsquo;s whoever is interacting with the computer system. Stakeholders and interests Hard to define all of the people the stakeholders and those that care about the project. Preconditions What must be true on at the start? Something that is always true at the beginning? or something idk. Not tested within the use case. Sucess Guarantee (postconditions) What must be true on successful completion This would be worth telling the reader. Main Success Scenario Also typically called the happy path or basic flow. Steps of three kinds. Extensions Alternate flows Basically there\u0026rsquo;s two categories of alternate flows Firstly, different ways of doing an activity in the alternative path. We don\u0026rsquo;t want conditionals in the main success scenario Frequently span the system as a hole. Bank Loan Example # ![[Pasted image 20240917165829.png]] Much more to this, see slides Most important thing to remember abt the homework is the extensions and maind success scenario.\n(9/19)\nBohem\u0026rsquo;s Cone of Uncertainty # At the beginning, we may not have a good idea of the requirements and parameters, but as it progresses, we get closer to the ideal.\nWe spend a lot of our time doing rework, fixing bugs. The avg project spends 50-80% total effort correcting defects. Why does it cost so much to fix defects, the worst ones require analysis, design, and testing. Finding and fixing defects earlier in the life cycle, the cheaper it is to fix. The cost of change curve.\nPure Watefall Model # Good if requirements don\u0026rsquo;t change. We can perfectly know everything before we begin, and it\u0026rsquo;s just up to us to getting it all down and then forging ahead. But in the Real World, waterfall is impractical because:\nPeople make mistakes, make misunderstandings The operating environment changes Didn\u0026rsquo;t nkow what they wanted in the first place There are some things that we don\u0026rsquo;t discover until we are well into implementation. The Royce \u0026ldquo;waterfall\u0026rdquo; model # Do everything twice\nMoving Away from Plan-Driven # This idea of Royce\u0026rsquo;s feedback loop is a concession to the insufficient capability of software development. Customers want a linear approach to know the timeline and cost of a project. People used to think that having an iterative approach meant that you had to go backwards and thought of it as evil.\nSpiral Lifecycle # Iterative process Prioritizes things according to risk\nP vs adapative\nTraditional, plan things carefully, and change things carefully and infrequently Adaptive - Change-driven, this is what agile is all about. ' Iterative and incremental development # Iterate means to redo. \u0026ldquo;we dont know what it is we are building, we are figuring it out as we go on. it\u0026rsquo;s evolving as time goes by\u0026rdquo;\nIncrement- even if you knew exactly what you were gnona buld, incremental is still good because we are building and releasing in periods. Focus is to get value to the customer early.\nIID means iterativeand-incremental\n![[Pasted image 20240919162625.png]]\nSnowden\u0026rsquo;s Cynefin Framekwork # There\u0026rsquo;s 5 categories of work\nComplex - Don\u0026rsquo;t know necsesarily what is going on, what we\u0026rsquo;re doing, but you gotta work to figure it out. AGILE AGILE AGILE The more uncertainty you have, the better a complex one is. Complicated - Generally know what it is we are doing. Sequential development has its sweet spot. Chaotic Obvious Discord (don\u0026rsquo;t nkow where we are) People are ignorant and uncertain. We need lifecycle models that can deal with these things such as agile or anything IID\nAgile is not a lifecycle model, it\u0026rsquo;s a methodology. Methodoly- more than a lifecycle. set of practices, techniques, procedures, rules. We usually pick a lifecycle model as part of our methodology. For agile, the choice is always some form of iterative lifecycle. One of the problems with methodology is whether we take a small M or big M approach. Small M - Basic approach, tailored plan. Big M - We are gonna give you a methodology, just do what you\u0026rsquo;re told.\nUnified Process # Methodology process built by the three amigos. Created the UML for OOD. THE design notation that everyone uses. Unified process was good because it emphasized iterative development. Historically we had phases, and we would iterate through these phases however many times as necessary. This still has a flavor of waterfall in the sense that we do feasibility analysis, and then develop it and then deliver the product.\nLifecycles used # Waterfall continues to be used as the predominant lifecycle. More than a third claim its use.\n![[Pasted image 20240919164007.png]] Look at the diff of the second thing\nIterative vs incremental have two different value propositions\nComplicated vs complex kind of work\nIn the uni process, difference between work loads and phases.\nAnalsis and Design # System Perspectives # Specifying Requirements The sweet spot is semi formal The proble with informal is that it\u0026rsquo;s very loosey goosey, not specific, tends to be ambiguous. but it\u0026rsquo;s easier to communicate with the cilent that\u0026rsquo;s not a tech head. The devs may be techies and enjoy mathematical rigor and formal specifications, which may be great from a technical perspective, but the customer will be confused. Semi-form is a reasonable balance point between these. These two extremes are mutually contradictory.\nInformal Specification Don\u0026rsquo;t use negatives with requirements. classic examples are double negatives, triple negatives\nClassical Analysis # ![[Pasted image 20240919165616.png]]\nSoftware Design(10/1-Current) Exam 2 # The problem of software design is complexity # Overtime, we keep building more complex and larger systems that require more demand.\nComplexity # For every 25% increase in problem complexity, there is a 100% incresae in complexity of the solution.\nUP Design Workflow # Cohesion and Coupling # ???? EXAM what\u0026rsquo;s the difference between shared aggregation and compositiion\nEXAM Slide for software testing -\u0026gt; Subtle Distinctoins People make mistakes, which becomes a fault, resluting at execution in a failure Which is wrong with some degree of error.\nRegression testing is one of the most important testing tools with automatic testing.\nExam 3 Notes # "},{"id":41,"href":"/docs/notes/university-notes/database/","title":"database","section":"University Notes","content":" Chapter 1: Databases and Database Users 08-21 # Vocabulary: # Database Data Universe of discourse (mini-world) Database management system - This software system will do 4 things with the data. Some examples inclued: mySQL, mongoDB, oracle Define - Know what information you want to store. Know the data types, the structures and also constraints. Construct - Populate the database with information. Manipulate - Performing some kind of query on the table to get a result. This could also include changing information and storing it again. Retreival, modification, accessing Share Database system - The entire db system is simply the DMBS + data. Database types and applications # There are various data types that a database can store. In the past it was strictly numbers and strings But now we can store videos, images. Some applications include: A geographic info system For a database to be useable, we need three things: Mini-world Data is correlated, and what data do we need to show for the user. Identify for WHOM we are storing the data. Catalog Stores the description of a particular databse, e.g. data structures, types, and constraints Also known as meta-data Example mini-world exercise: # Online car resale database: MODELs are of CAR BRANDs MODELs have YEARs CAR_ID have MODEL and YEARs and AVAILIBILITY CAR_SELLERs sell CAR BRANDs PEOPLE buy CAR_IDs PEOPLE are interested in CAR_IDS PEOPLE have SALARYs\nBUYER\nName Salary Ethnicity Interest Michael 90k Asian Brown, Toyota CAR Make Model Availability Acura RDX 3 Toyota Camry 2 Lexus ES100 0 CAR_ID ID Make Model Year Color Condition Previous owners Available 101 Acura RDX 2010 Grey Used 2 Yes 102 Acura RDX 2015 Black Like New 1 Yes 103 Acura RDX 2024 White Mint 0 Yes 201 Toyota Camry 2010 Grey Used 1 Yes 202 Toyota Camry 2020 White Like New 1 Yes 301 Lexus ES100 2020 Gold New 0 No Meow (8/26) # Warmup Questions # Explain any DB system. Example of an industry could be health care. They store patient information and they can use it for trends and combatting Differentiate: Data, Database, DBMS, DB System Data is information that we would like to store and use. Database is a storage system that will hold all of our data. Held typically within a server when using cloud computing. DBMS is the management system, such as oracle, mysql, mongodb, etc. A DB system is the DBMS but also including the database (data). What are the main functions of DMBS To modify, add, delete, and access data. Define, construct, modify, and Share Explain Database Catalog A database catalog is metadata, which is data regarding the data. For example: Characteristics of a Database compared to the programatic approach # Self describing Program-data independence We used to have very tightly coupled programs and databases. Where programs and data would both have to be changed when one needed to change, such as adding a new attribute to a class. Data abstraction # Achieved through a data model. This is used to achieve program-data independence. There are different models for data abstraction Ex: high level, low level, etc. You can use this to hide information, but still retrieve it. The data model is a representation of the data, and the DBMS will use this to access data without exactly knowing what it is. Data Access # Just one database, but we will have concurrent users How do we juggle this? OLTP (Online Transaction Processing) - allows for many queries to be concurrently executed. Concurrency control - to guarantee that each transaction is correctly executed or aborted Locking the data based on whoever was first to access it. Eventual consistency. Recovery subsystem - It\u0026rsquo;s a failsafe system to prevent corruptions to information. We log changes permanently so that in the case that the change doesn\u0026rsquo;t go through, we can roll-back and recover the information. Types of users # End users - People that use an API to query the database Casual users - Low level access users that interactive with the front end to access the database Parametric users - constantly talking to the database Ex: Reservation agents. Standalone users Database designers - Design the database and populate it with information. Data Base Administrators - These people would maintain the database for security reasons and make sure that it\u0026rsquo;s in proper order. They have the rights to modify, create, and delete data. They also provide accessing information to other users (who can access what) Also creating policies Basic monitoring Advantages of Database approach # Storage structure for efficient query processing Most drives will use hashing for indexing. Basically we index things so that we can access it efficiently. Controlling redundancy. Say we have the same information stored in different places for different people. This would be potentially exhasutive of our storage resources, and each change to one would have to be replicated in the others. Instead we could control who can access the same information. Query optimization via technique. Backup/recovery system Representing the relational data. Enforcing integrity constraints. Basically ensuring that information is true and consistent. Ex: Credit hours will be in a range of 1-6, if you are registering for a class that has a prerequesite, that you have the corresponding credit, if you register for a section of a class, you cannot register for another unique section. Chapter 1 (8/28) # Warm up questions: # Characteristics of DMBS There is abstraction, when we pull data we aren\u0026rsquo;t fetching the data itself, but rather locations of data Types of DB Users End users This includes many types of users, but it\u0026rsquo;s going to be the target audience so to speak. This includes people who make api calls, those who use the service, or make calls via the frontend. Casual, parametric, and standalone Those who commonly access the data essentially. Administrators The database administators exist to ensure that the database is properly maintained and in order. They do this by quality checking the database (the correctness of data) and granting different access levels to different users. This is actor on scene. Designers Workers behind the scene vs on the scene On the scene care about the data, the database, the actual content. But behind the scene workers are like the system designers who create the platform of the DBMS and the hardware/software environment. Advantages of DBMS Traditionally in the past, data was tightly coupled, so any changes you make would affect the entire database. But now that we have program-data independence, we now have the ability to change the data without having to change the program. Data Abstraction Using a data model, we can hide data but still retrieve it. This allows the user to still effectively access data without having too much that it shouldn\u0026rsquo;t have. Abstraction is the idea that we can hide the unneccessary details such as where the data is specifically located and that entire process, and instead just focusing on getting the accurate information to the user. Program data independence Vocab for this lecture: # Data model Schema vs State Three-schema architecture DB Language A typical DBMS Component Data model # Related to data abstraction, hiding the process of data retrieval from the user. This model will describe the structure of the DB, the operations for manipulating and changing the structures, and the constraints that the DB would obey. Constructs define the database structure\nThey typically are comprised of elements (data and their types), groups, and relationships Operations are the functions that we call to obtain or update the information regarding the construct of the data model. Basic model operations include: insert, delete, update User-defined operations include: computer_student_gpa, update_inventory Categories of Data Models # Conceptual (high-level, semantic):\nProvide concepts that are close to the way many users perceive data. Physical (low-level, internal): Provide concepts that describe details of how data is stored in the computer. Such as the data type, number of bytes, the index structure, etc. Implementation (representational): Sort of a middle ground, not too much detail of the physical storage, and also conceptually understandable. Self-describing: Combines the description of data with its values. Such as XML, key-value stores, and some NOSQL systems. Schema (intension) # Database Schema - the description of the database (just the structure)\nIncludes descriptions of the structure, data types, and the constraints. But most importantly, not the actual data. The primary key is the particular column of a data table that provides identifiying information. This is used to with other tables to map relationships. State (extension) # At this point of time, what is the current status of the database?\nEx: At 12:13pm, STUDENT table has 2 records, COURSE has 4 records, etc. Essentially a snapshot of the database (including the content) at a given type. Every state should be valid, if any change is invalid, then the state is not saved. Three-Schema Architecture # The main characteristics of a database such as self-describing, program-data independence, and concurrency is achieved through this architecture type The goal of Three-Schema is to separate user applicatoins from the physical storage\nThe three levels of schema: # Internal Schema - describes the physical storage structure and access paths (indexes) Uses a physical model Conceptual schema - describe the structure using datatypes, relationships, and user operations, as well as constraints for the entire databases Uses a conceptual or an implementation data model. External Schema - Various user views for different types of users. ?????? look into this Typically uses the same data model as the conceptual Mapping # Basically what is the relationship of the external view to the conceptual schema to the internal schema so that we can effectively obtain the proper information and display it accurately to the user. When a user makes an access request from the top level, it has to be formatted to the appropriate label at each level. This transformation is being done by mapping. This is why the three-schema architecture has a mapping concept.\nData Independence: # Logical Data Independence You can change the conceptual schema without having to change the external schema. Physical Data Independence: You can change internal schema such as the \u0026ldquo;how the data is stored\u0026rdquo; without making any change to the conceptual schema. Example: Reorganizing indexes for performance improvement. Physical Data changes are easier to implement than Logical Data. This is because physical change independence are done by the computer, the system. Whereas logical changes have to be thoughtfully taken into consideration by you. DBMS Languages # Data Defintion Language (DDL)\nOnce you are done with the database design on paper, you have to actually build it You will define all of the structures, this is where we have the DDL. Data Manipulation language(DML) Specifies the data retrievals and updates. Examples: Querying changes such as create, retrieve, update, etc. Can be embedded into a host language such as C++, COBOL, etc. Stand-alone DML commands can be used directly such as SQL queries. (9/4) # Warm up Questions # What informations data model represents? Different data model? There are four different categories of data model. Data base schema vs database state (valid state) The schema is sort of the skeleton structure of what information is being stored, the data type, the constraints, etc. The schema is stored in the database catalog. this stores the metadata. a database state is a single snapshot of databaes at a given time. So We would have an empty state at the beginning, and only valid states would be saved. A valid state is any state that satisfies all of the constraints and requirements and relations. Three schema architecture -\u0026gt; program data independence. The three schema architecture involves different levels of representation of the same data. The primary goal is to separate what the user sees from the physical storage. It is all connected via a mapping within every level. This is how we achieve program data independence. Changes within any level, will affect the other layers but without making direct changes to the schema. DDL DML? DDL is data definition language. Used to define the structure and constraints of the DB. It\u0026rsquo;s just a general descriptor of the database. After creating the DDL, we should store it in the Database Catalog. DMBS Component Modules # Secondary -\u0026gt; Buffer -\u0026gt; Main Memory The operating system will retrieve data from the hard drive. Diff users that access data\nAdmin/Designer: Privileged commands CREATE user, alter permissions DDL compiler will check if it\u0026rsquo;s a valid query, if the data is valid. Basically if it\u0026rsquo;s a correct query, it will convert it into the internal form. Casual: Query optimizer - rearragne the query in such a way that you can access the data faster. It\u0026rsquo;s inherent to any DBMS. Checks for redundancy as well. Essentially optimizes it maine. Parametric user: Think of it as a database entry operator. or data entry operator They don\u0026rsquo;t write new queries, they only enter new data Let\u0026rsquo;s say we have a table with 10000 students, we can write a program to do data entry. COMPILED TRANSACTIONS, basically they create functions that are already valid, and then they will simply supply parameters to execute. stored data manager ensures that whatever physical access of the data is valid. The catalog is frequently communicated with by the run time databse processor to optimize efficient retrievals, such as getting index information, etc. It\u0026rsquo;s in the bottom left . Concurrency control module is seen right after the execution. This is because concurrency control is all about validating execution. Physical Centralized Architecture # Combines evrything into a single system. This includes: DBMS software, hardware, application programs, and UI processing software. User can still connect remotely, but all the processing is done at a centralized site.\nClient Server Architecture # Client: What happens in this case? Client has application programs, has U.I. Same concept in terms of DML, we use a host language with ODBC and JDBC for connectivity between the client and the server to generate queries. The query is passed to the computer network, and that network is connected to a number of different servers. Examples of server includefile server, print server, and DBMS server. If it\u0026rsquo;s a database query, the query will be given to the DBMS server. So instead of one server doing everything, we split up the services.\nThree-tier client-server architecture # In between the client and databse sever, we will have a separate server called the application server or web server. What is the responsibility of this middle layer?\nIt works as a middle man kind of . All of the access control information, the logic, and the business Acts like a conduit. What is the advantage of this third layer? This middle layer will verify whether a query is valid or not, and pass it accordingly. There\u0026rsquo;s also a greater level of security. The clients cannot directly access the database server, only the middle tier can access it. (9/9) # Warmup questions # DDL Compiler - What is the main job of compiler? Translate to machine code by looking at the query. Validates that the queries are accurate. Query Optimizer - Optimize queries. When we query, there are different ways to get the same result, and we can optimize it by accessing certain indexes, or combining tables etc. Pre-compiler - Separates the code for the Host Language Compiler and the DML Compiler. It separates the queries from the rest of the code. We can embed SQL code in a host language such as ODBC and JDBC Runtime DB processor - Essential coments. Processes executable commands such as queries and transactions. It works in tandem with the system catalog because of the three schema architecture. We can get index information, and the physical location of data. Stored data manager - Whenever we access data, the SDM will handle will access requests of the data. Architecture: Centralized vs two-tier vs three-tier In a centralized architecture, all of the information is in a single system. Everything we want to do will be part of a particular machine\u0026rsquo;s job. There\u0026rsquo;s a terminal that doesn\u0026rsquo;t have ANY processing power, to access that system. Wireless or wired, we can access it within an available network. Two tier - We have a separation of servers, a division of work. Allows users to access specific functions and multiple clients can process different work at the same time? The client now has a user interface and a bit of processing power as well. Three tier - The main focus here is the existence of the third tier (middle layer). This intermdiate layer is called the application server or web server. It connects the client to the server and gives a level of abstraction. The client doesn\u0026rsquo;t have access to all of the data, only requests that are allowed will they be able to retrieve partially processed data. Database Design Process # Almost any application will require a database of some sort. First, we need to identify our miniworld. Secondly, go to your client and ask, \u0026ldquo;what are the requirements?\u0026rdquo;. Typical software design process. Collect information and requirements. Thirdly, we create a detailed conceptual schema. This allows us to cross-check requirements and also ask our client if there\u0026rsquo;s any issues. It\u0026rsquo;s easier to understand. Fourthly, the logical design. We select our DBMS. Most DBMS can take an ER model and generate a logical schema which is the intitial implementation of the DB. It can create a table, it might not be perfect and we may need to add some constraints. Lastly, physical design. We need to verify everything: if all of the constraints exist, the relationships are established, etc. Examples Database Application # Entity Relationship (ER) Model Concepts # Three components:\nEntity - an object or idea that can be defined by attributes. Type - What is the structure as a whole. Sorta like the schema to snapshot Set - At this point of time, how many entities are in the DB? Example of Student entity: The structure would be first name, last name, id, etc. Set - At this number of time, how many labels do we have in our DB table. Attributes - Properties used to describe an entry Essentially information we would like to store and the associated data. Example: Name = \u0026lsquo;John Smith\u0026rsquo; SSN = \u0026lsquo;123456789\u0026rsquo; Address = \u0026lsquo;7321 Fondren Houston\u0026rsquo; Every attribute will have a value set which is a data type or constraint e.g. integer, data, string, etc. The constraint could be like a range of values it cannot exceed or go below. Declaration example in NOTATION form: Student(Name, Address, Gpa, SSN) In ER Model form: Student (entity name) is in a square/rectangle shape, and the attributes will be connected via lines and will have a round shape. ![[Pasted image 20240909121213.png]] Types of Attributes Simple/Atomic - You cannot further divide the data Example: SSN, Age Composite - You CAN divide into smaller data components. Example: Name -\u0026gt; First name \u0026amp; Last name, Birthday -\u0026gt; Month \u0026amp; Day \u0026amp; Year ==Note that, in the event you rarely or never use the smaller component, you should convert the composite data type into a simple. == Single-valued - An attribute has a single value that is unique. Example: SSN, Age Multi-valued - An attribute that can have multiple values. Example: {PreviousDegrees}, {Color} This is represented with a double circle. This Works_on attribute shows that this person can work on MULTIPLE projects. ![[Pasted image 20240909122157.png]] Complex - Multivalued and composite attributes combined. Example: {PreviousDegree} As a user continues their education, this PreviousDegree may increase to contain multiple degrees, and all of these degrees are composite: year, major, school, department, etc. Notation form: {previous_degree(year, major, school, department)} Person({Residence(address(street, city, zip), {phone(areacode, 3-digit, 4-digit)})}) Stored or Derived - When two or more attributes are related - example: Age and Birth_date - Stored: Birth_date Derived: Age NULL - An attribute that has no value for an entity or currently missing Example: Apartment Number may not exist for a house, and a person may not have filled out a form entirely. Key - An attribute that is always unique Example: SSN, VIN, UTD_ID In a diagram, these values are underlined. A key attribute can be composite. Example: A car\u0026rsquo;s license plate can have an identification number and a state. An entity can have multiple keys, and all of them will be underlined. This is different than the relationship schema where only ONE primary key is underlined. Any entity without a key is a Weak Entity. Relationship Has a type and set ER Diagrams - Notation # There are two forms of the ER: diagram and notation We can represent the same thing in both forms: ![[Pasted image 20240909121751.png]]\nExample: In this particular diagram we can notate it as: EMPLOYEE(Name(Fname, Minit, Lname), Address, Salary, \u0026hellip;) (9/11) # Warmup questions # Entities. Entity Type. Entity Set Define Attributes Attribute Type ER Notation Regular Notation Example Composite More children Parenthesis to signify the children Person(height, age) Multivalued Double lined circle checkedoutbooks{Meow1, meow2, meow3} Complex Double lined circle with children Squiggly bracket to signify multivalued, and the multiple children can also be double lined flight{flightNo(First,No), {Pilots}, fline} Derived ??? I don\u0026rsquo;t know Stored: Position Derived: Null ??? I don\u0026rsquo;t know When the entity has no values. Key Underline Underline Student(ID) Er Diagram for COMPANY Schema # ![[Pasted image 20240911123001.png]]\nRelationships # Note that the arguments of these relationships are undirected. can go both ways. These are binary relations because there\u0026rsquo;s 2 entity types.\nWorks_for(EMPLOYEE,DEPARTMENT) Supervision(EMPLOYEE, EMPLOYEE) Recursive Works_on(EMPLOYEE, PROJECT) Controls(DEPARTMENT, PROJECT) Manages(EMPLOYEE, DEPARTMENT) Dependents_Of(EMPLOYEE, DEPENDENT) Relationships Higher Degree # When we first create the ER model, we don\u0026rsquo;t consider relationships. Now we need to relate two entity types together, to connect the tables. When a relationship is created within the SAME entity type. This is recursive relationship. In the diagram, we read it from left to right. top to down. So given the relationships we defined earlier we can create the following refinements: Manager of DEPARTMENT -\u0026gt; MANAGES Works_on EMPLOYEE -\u0026gt; WORKS_ON Department of EMPLOYEE -\u0026gt; WORKS_FOR Role naming: In recursive relations, you need to explicitly show who is the Supervisor and who is the Supervisee. Notice how in the diagram below, there are 1s, Ns, and Ms. Constraints # Cardinality Ratio - Specifies the maximum number of relationship instances that an entity can participate in.\nOne-to-one (1:1) Employees (managers) will each manage just one department, and vise versa One-to-many (1:N) or Many-to-one(N:1) Multiple employees can work in the same department, so this would be a Many-to-one Many-to-many (M:N) Multiple Employees can be working on varying projects with random overlap. Participation / Existence Dependency Contraint ![[Pasted image 20240911123510.png]] Participation # Notice how there are multiple lines connecting certain entities and relationships. Total Participation - Represented by double lines. Every single entity of that set or type, must participate for a paritcular relationship. Examples: Employees MUST work on a project. Optional Participation - Represented by a single line. It is not necessary that every entity of a certain entity type needs to participate. Examples: Let\u0026rsquo;s look at Department CONTROLS Project. Every project MUST have a department that\u0026rsquo;s overseeing it, but NOT every department will have a project. Another thing to note here is that a department can have MULTIPLE projects. And every project will be controlled by a single department. Weak Entity Type # An entity which does not have KEY attribute. Nothing to define uniqueness. Identifying itentity type. How will you identify DEPENDENT? based on EMPLOYEE. Double Diamond in the ER diagram represents identification dependence. The entity that is weak will also have the double lines, and the weak entity must have an identifying entity. Generally, every weak entity will have total particpation to its identifying entity. A partial key is dotted underline. A dependent is uniquely identified by the primary key of the identifying, and the partial key of itself. Sometimes if a WEAK entity can be represented by a complex attribute, but this is ill-advised. Min-Max Notation # if you have participation and cardinality ratio, you can represent it with Min-Max Notation. You use this with ternary relationships generally. Default: min = 0, max = n (signifies no limit) Constraints: min \u0026lt;= ,ax, min \u0026gt;=0, max \u0026gt;=1 ![[Pasted image 20240916121557.png]] High Degree Relation # We can have relations of higher degrees that can be difficult to represent. When we have 3 entities related to each other, we can either have 3 separate binary relationships, or a single tertnary relationship. When we use 3 separate binary relationships, we need to be mindful that we perfectly translate all of the important information. In the image below, we can see a WEAK entity representation of a tertiary relationship. To identify this weak entity, we need to pull at least one partial key from EVERY entity that is an IDENTIFYING entity. All in all, there are 3 representations of a ternary relationship: using weak entity types, 3 separate binary relations, and a single ternary relationship. ![[Pasted image 20240916123417.png]] (9/16) # Warm Up Questions # Relationship - Relating two entities in order to connect the tables. Degree of relationship - The number of entities involved within a single relationship. Most relationships are binary, but the degree is how many entities are involved with a relationship. Recurisve relationship - When a relationship of the same entity type is created. For example, we may have the Employee Entity, and we could have other Employee entities such as Managers or Supervisors related to an employee. Cardinality Ratio (9/18) # Warm Up Questions # Participation constraints - Total vs Optional. In total, every single entity must participate within the relationship. In an optional participation constraint, there is no mandatory existence of a relationship. weak entity type Apparently you do NOT have to have a partial key attribute in a weak entity relationship. Ternary relationship\nEER Diagrams (Enhanced Entity Relation) # Oftentimes, an entity type can have additional subgroupings. Example:\nEMPLOYEE can be divided into SECRETARY, ENGINEER, TECHNICIAN MANAGER SALARIED and HOURLY When we model this, we connect the divided subgroups to a single circle, and then we connect the circle to our entity. Make sure the lines have the subset U symobl. Super Class # The parent class that holds attributes in which others may inherit.\nSub Class # A sub class entity must not be in a set that is not in the super class. Basically, no entity can exist as a sub class without it existing in the super class. There\u0026rsquo;s a list of sets for the super class, and the sub class must come from one of those sets. Participation of a super class entity into a subclass is optional. But any entity that is in the sub class MUST be in the super class. A single entity can also be in multiple sub classes.\nInheritance # When an entity is a member of a subclass:\nit will have all attributes and relationships of the superclass. Specialization # Top-down approach We have a superclass and create subgroups based off of it. We then create separate subclasses. ![[Pasted image 20240918121837.png]]\nThree types of specialization # Predicate-defined (conditional): Based on some the VALUE of an attribute such as Job-Type or Car-Type, etc. Be aware that if these unique values didn\u0026rsquo;t have its own unique attribute or relationship, it would be better off as an attribute instead of a subclass. Attribute-defined: this one is based on an attribute of the member class. The difference between this and predicat-defined is that PREDICATE_DEFINED can be complicated. User-defined: User will select the membership manually. But not only is it manual, but there is also no condition that can determine the membership. Generalization # Bottom up approach We create some subclasses, and try to find common attributes. Based off of those commonalities, we can create a superclass. ![[Pasted image 20240918121822.png]]\nWhen should we create subclasses? # Certain attributes applies to some, but not all entities of the superclass. Some relationship types may be participated only by entities of the subclass. manager manages a project Hourly_employee belongs to a trade union Constraints on Specialization/Generalization # Disjointness: Disjoint set - Indicated by the d in the circle. If an entity exists within one subclass of that set, they cannot identify as anything else. Overlapping set - Indicated by an o in the circle. The same entity is allowed to be a member of more than one subclass of the specialization. A good example of this would be a PART Entity being divided into purchased and manufactured. Completeness: Total - Every entity of the super class must be member of SOME subclass. ==Generalization is usually Total because the superclass is derived from the subclasses.== Partial - It is not necessary that every entity is a part of some subclass, can exist as a super class. This is indicated by the double / single lines. Exam guidelines # common mistake- student gets confused between database model and 3 schema architecture. Conceptual view, physical view, external view.\n(9/25) # Warm Up Questions # Specialization vs Generalization Specialization is when we are creating subclasses based on one of like three criteria, either a condition, an attribute, or however the user feels. It\u0026rsquo;s a top down approach. Generalization is the opposite, a bottom up process. We have already have a few entities that have similar attributes to one another, and we decide to group then by making them children of a new superclass. Define: Disjoint -\u0026gt; If an entity is a part of a subclass, it can only be part of that one subclass, it cannot identify as another. Overlapping -\u0026gt; Entities are allowed to identify as whatever subclasses. Multiple or 1. Total -\u0026gt; every entity that is classified within a superclass must also identify as one of the subclasses. Partial -\u0026gt; An entity can identify and exist as a superclass without associating to a subclass. Scope: # Hierarchy Lattice Union type Guideline ch.9 (Mapping, primary key, foreign key) Hierarchy (single inheritance) # We have one subclass, and it inherits from only one superclass The subclass\u0026rsquo;s attribute is the union of the local attributes with the superclass attributes. Same thing for the relationship.\nLattice (multiple inheritance) # The subclass will inherit from multiple superclasses. This subclass\u0026rsquo;s attributes will be the union of all superclass attributes, and also the every parent superclass that may exist and also its own local attributes. Same thing for relationship.\nUnion Type # There\u0026rsquo;s like a standard union for shared subclasses, and also a Category Type. Let\u0026rsquo;s say we have three superclasses: person, bank, company. The subclass of these three superclasses is a single Owner entity. The owner would be a subset of the superclasses.\nShared subclass vs category type. A category type is a part of a proper subset. It can only be one of the superclasses, not all of them. Shared subclass is an intersection\nSimplifying an EER Diagram # There are many way don\u0026rsquo;t create a subclass if it\u0026rsquo;s not necessary if that subclass doesn\u0026rsquo;t have any specific relationships either, don\u0026rsquo;t create it Chapter 9 ER-to-Relational Mapping Algorithm (9/25-10/16) # Information vs formal versions of the same word # Table -\u0026gt; Relation Column -\u0026gt; Atrributes -\u0026gt; Domain data types Rows -\u0026gt; Tuples\nPrimary Key # This attribute will provide uniqueness to an entity. We can have multiple of these keys to a single entity, and we would use all of them in combination\nForeign Key # The constraint between two Tables/Relations. We have tables/relations that can be referencing or referenced.\nSo we have two tables, SECTION and COURSE. THe Referenced Table\u0026rsquo;s PRIMARY KEY, would be the foreign key of the Referencing Table.\nGoals of mapping # Preserve as much information as possible. Maintain as many constraints as possible. The least amount of NULL values. Step 1: Mapping of Regular Entity Types # Identify the strong identity type. For each, create a table that includes every simple attribute of the entity. Note that we can\u0026rsquo;t use complex or multi-valued right now. Any simple attribute gets written down, composite ones should be written in simple component form (e.g. instead of address, write down street, city, etc.) Choose a key attribute as the Primary Key, if it\u0026rsquo;s composite, make the set of simple attributes that form it together to be the primary key. You can only have one primary key, every other key would be a unique key. There\u0026rsquo;s a misconception with mapping keys with composite attributes. In the ER-Diagram, you will not underline all of the simple components of a composite attribute, you will ONLY underline the parent attribute. In the mapping, you will underline ALL children instead. Note that if you see multiple underlines in a mapping, it indicates a composite attribute that is a key Denoting uniqueness can be done in this form. Unique: Department -\u0026gt; DName Unique: Entity -\u0026gt; Attribute Step2: Mapping of Weak Entity Types # Create a table for the weak entity first. At this point of time, all attributes will be put into the table. Include as a foreign key the primary key of the OWNER/IDENTIFYING entity type. We also need to add the partial key of the weak entity type as a primary key of the table. The primary key is going to be the combintation of these 2 keys. Note that if we have a weak entity that has a weak owner, every single sub-entity will inherit all previous keys. Step 3: Mapping of Binary 1:1 Relation Types # Three possible approaches Foreign Key (2 relations) approach You arbitrarily assign these two entities as S and T. Ideally you give whichever entity has total participation to S. S will acquire the attributes that relate to the relationship itself, and will also require a foreign key that is a primary key from T. We should try to minimize null values, and this is why we need to be careful when determining which relation is S or T. S should be the entity that has TOTAL participatoin. Merged Relation (1 relation) option: When you have a 1:1 relationship and a total participation, just create a single relation that will represent two entity types. You are encouraged to do this when both participations are total. (Both tables have the same number of tuples all the time). Ex: Emp_Dept -\u0026gt; A() = A(EMP) $U$ A(DEPT) $U$ A(ROLE) Cross-Reference or relationship relations (3 relations) This option is bad because: you have to join more tables to make connections, slowing down your queries. It\u0026rsquo;s purpose is to set up a third relation for the purpose of cross-referencing the primary keys of the two relations S and T. Step 4: Mapping of Binary 1:N Relation Types # Identify one of the relations as S and T. The S will be the N side, and T will be the other side. T will contain the primary key, and its key will be added as a foreign key to S. If there are any attributes in the relationship, they will move towards S. What if its a recursive relation You again assign an S and T, where S is the supervisee and T is the supervisor. So because we have S and T, the foreign key of S which is still employee would be the primary key of T, the supervisor employee. As such, we add a new attribute called SSN_Supervisor. Just as a general rule of thumb, we want to avoid multivalued attributes, which is why we make the Supervisor SSN instead of a supervisee SSN because there could be multiple per supervisor. Step 5: Mapping of Binary N:N Relation Types # Create a relationship relation S (basically a new table that has the two keys, and any simple attributes of the relation) Within S, add as FK the PK of participating entity type. (this will be two keys) Within S, add as attributes, any simple attributes of the relationship. Step 6: Multi valued attributes # Create a new relation R Add multi-valued attributes to R. Add as a FK the PK of the entity type with whom it is connected. So this relation will only have two attributes if it\u0026rsquo;s a simple multi-valued attribute. Step 7: Mapping of N-ary Relation Types # Note that we are creating a new relation (table) that will contain all of the entities within the relation. This table will have a composite primary key, the combintation of all of the primary keys from the participating entities. It will also contain any simple attributes that regard to the relationship itself. ![[Pasted image 20241002122132.png]] Supply -\u0026gt; SName PartNo ProjName Quantity Mapping of Generalization and Specialization Hierarchies to a Relational Schema # Step 8: Options for mapping specialization or generalization # Convert each specialization with m subclasses 8A: Multiple relations-Superclass and subclasses. The table/relation will contain all of the attributes of the superclass and its primary key. We then create another relation labelled Li for each of the subclasses which will contain the primary key of the superclass unioned with the individual attributes of the unique subclasses. 8B: Multiple relations-Subclass relations only Still creating multiple relations, but those relations will be for each subclass where each attribute of the subclass is the local attribute Union, all of the attributes of the super classes. This only works for total and disjoint relations. Note that you will see the total relation from the super to the (d) thing, not from (d) to the subclasses. This should make sense to you mug. Basically, this variation allows us to not have to write any superclass relation, but all of our subclasses will show the attributes of its superclass. The reason why it has to be total is: say we have a superclass vehicle and two subclasses car and truck. If we don\u0026rsquo;t have total participation, we will lose information of the superclass (Vehicle_id, license_plate_no) when it classifies as a subclass. Loss of data. The reason it has to be disjoint is because if it was overlapping, we could have a single vehicle entity identify itself as both a car and a truck. We would then have the same information represented twice and this would be a duplication. Duplication of data. 8C: Single relation with one type attribute. Partial disjoint relation This one is good for disjoint subclasses. We are creating a single relation/table, so at that point of time, this single relation will have all of the attributes of its superclass union with all attributes of the subclasses union one type attribute. The type attribute specifies whether it identifies as a certain subclass or not. The discriminatory attributes are going to be the subclass attributes because many of them will be null because the entity can only identify as one subclass. 8D: Single relatoin with multiple type attributes. Overlapping subclasses We have a single relation/table with attributes of the superclass, and all of the attributes of the subclasses. We also have a boolean attribute for each of the subclasses that contains information about whether or not this subclass\u0026rsquo; attributes should be considered. The key difference between 8C and 8D We are either using a single attribute to REFERENCE which subclass that this entity belongs to, or we have overlapping subclasses which means the entity can belong to multiple of them, which is why we use multiple booleans. Shared Subclass # Category Type # Sometimes it\u0026rsquo;s not possible to find a key from the data, in this case you need to create an surrogate (artificial) key to create uniqueness. If possible, use generalization specialization hierarchy methods (8a,b,c,d) instead of category types. Relational Model # Definitions: Domain -\u0026gt; data type along with logical definition and format. ex: Home_phone attribute has the domain of int, 10 digits, country code, area code, number, range, etc. ex: GPA has the domain of type double, ranges from 0 to 4, etc. Notation: Dom(GPA) = Domain # We can create a domain for multiple / different attributes. A home number and an office number would use the same domain. Another rule is that, there cannot be a NULL value. This is best seen within forms with required entries. Relation State # $r(R) \\subset Dom(A_1) * Dom(A_2) * \u0026hellip;$ All of the attributes in a relation will be within the subset of the cross product of its domain attributes.\nDegree of Relation # The number of attributes in a relational model. Don\u0026rsquo;t get this confused with the degree of a relationship (the number of entities in a relationship).\nCharacteristic of Relational Model # Tuples -\u0026gt; We don\u0026rsquo;t have an order, and the records are not expected to follow a certain order either. When we store a tuple/record into physical storage (hard drive), the information WILL be stored at a specific location/index. Attributes -\u0026gt; We can have order. When we enter data for a record, we need to follow the order so that information is stored in the correct attribute. Say we have an address and a name column, we need to make sure we enter address and then name in the corresponding order. Note that this correspondence is important to uphold, however there are certain systems that allow you to specify which attribute you are populating. Values in attributes -\u0026gt; The value MUST be a part of its domain. The 3 different types of NULL values Not applicable Unknown Not available at this point of time. Flat structure -\u0026gt; The relational model does not allow lists. Such as a multivalued attribute. Relation Naming Constraints: two different attributes within the same relation cannot have the same Name. However, two attributes in different relations CAN have the same name. Ex: You can\u0026rsquo;t have an entity Student with two Name attributes, but you can have a separate entity say Department with the attribute Name. Notation -\u0026gt; Fuck fill this in Relational Database Schema # structure, constraints, functions Relational Database State # The state is the populated schema at a certain point of time. Constraints # Inherit Constraint -\u0026gt; Based on the data model itself. (Example: Flat structure rule) Semantic constraint -\u0026gt; beyond the expressive power of the MODEL, must be implemented through the application function/programs. SQL-99 allows CREATE TRIGGER and CREATE ASSERTION to express some semantic constraints. Semantic constraints cannot be enforced by the data model itself and requires third party assistance. Explicit Constraints - constraints that we expect to enforce. Domain constraint -\u0026gt; The value of an attribute must exist within its domain. Ex. a GPA value must be double and must be within the range of 0-4.0 What is the difference between domain constraint and a semantic constraint such as working hours of an employee must not exceed 40 hours?? Key constraints -\u0026gt; Superkey constraint -\u0026gt; If no two tuple in any relation state of r will have the same vlaue. Basically when we look at this entire super key, it will be unique compared to any other entry. Basically if we have one primary key, we can have the entire list of attributes as a superkey because it would still be unique because of the primary key???? One significant example is Registration number and State, these must be paired to be a super key, individually, neither would suffice as a super key. Minimal superkey is the smallest identifying combination of attributes. we can have multiple minimal superkeys. Candidate keys should be minimal superkeys. The one key we select from the candidates is the primary key. Key vs Superkey -\u0026gt; every key is a superkey, but keys are minimal super keys after omitting all of the attributes that aren\u0026rsquo;t unique. Entity integrity constraints -\u0026gt; The primary key attribute does NOT allow any null values. There are 3 different aspects of NULL, but for no reason, we cannot have a NULL value. This is because we cannot uniquely identify an entity with a null KEY. Note that with a composite key, none of the components can be null either. Referential Integrity constraints -\u0026gt; The foreign key concept. The foreign key will use the primary key of another tuple to reference it. The foreign key can obtain value from the primary key OR a null value. If foreign key is the PRIMARY KEY of a tuple itself, such as in a weak-entity relationship, then it must have value. Warm up Questions (9/30) # Single vs multi inheritance\nSingle inheritance is when you are inheriting attributes and relations from only one super clas, and multiple is when you acquire those attributes from multiple unique superclasses. Union type is an entity that represents the subset of multiple superclasses. Typically a category is a member of just one superclass, but is allowed to inherit multiple. The difference between shared subclass and union types: A category type is a part of a proper subset. It can only be one of the superclasses, not all of them. Shared subclass is a subset of the intersection of our superclasses. it inherits all of those attributes. When we consider union type, the owner can be represented by only one of the superclasses. A foreign key is a key attribute of an entity that links to the primary key of another entity. Warm up Questions (10/2) # Step 1: Map strong entity (the entities with only a single rectangle) Create a table that has all of the simple attributes. Identify one unique attribute to be used as the primary key. All of the other keys will unique keys. Any composite attributes should only have its children, the atomic attributes, in the table. Step 2: Map weak entity (the entities with a double rectangle) Put all of the simple attributes into the table. The foreign key of this table is the primary key of the owner or identifying entity type. And of course the partial key of this weak entity type will have its own partial key. And the primary key in total will be the combination of the foreign and partial key. Step 3: Mapping 1:1 binary relationship Why are we considering that S which has total participation within this 1:1 relatoinship, as the S. What will happen if we select employee as S because it has partial participation. Since its total participation, every single instance of department will be related to at least one employee, but not every employee is related to a department. Foreign key approach (2 relations) Merged relation (1 relation) You can simply merge the tables b/c there will be the same number of rows, with each unique employee being mapped to a unique department in a 1:1 total participation. Cross-reference (3 relations) Note that in this cross reference table, you need to get the primary keys of the two tables that are being related, and also any attributes that are a part of this relation such as start_date in the employee department relation. Warmup Questions (10/7) # Describe: 1:N Mapping There are multiple methods for mapping this, but generally we do the foreign key approach. We assign S to whichever entity has more participation and T as the other. The S side entity will add as a foreign key, the primary key of T. S will also inherit any of the relatoinship attributes. M-N Mapping Create a brand new relationship that has multiple foreign keys, that come from all of the primary keys of two entities. It will also contain any relational attributes. N-ary relationship Just like N-M mapping but we\u0026rsquo;ll have more participating entities. 8a, 8b mappings 8a is where we have separate tables for each subclass and the super class and we will add as a foreign key, the primary key of the super class. 8b is similar in the fact that we have separate tables, but instead of adding a foreign key, instead we add all of the attributes of the super class and we don\u0026rsquo;t have a super class entity anymore. The reason why we need to have disjoint for 8b is so that for one, we aren\u0026rsquo;t duplicating data. If we have a shared subclass, and we inherit multiple super classes, we would be duplicating the same attributes of the parent. The reason why it has to be total participation is: say we have a superclass vehicle and two subclasses car and truck. If we don\u0026rsquo;t have total participation, we will lose information of the superclass (Vehicle_id, license_plate_no) when it doens\u0026rsquo;t classifiy as a subclass. Teacher answer explanation: not every entity in the super class need to identify as a subclass. That means those that do not identify as a subclass will literally disappear. 8c, 8d mappings 8c: we have a single attribute that acts as a type indicator. When the attribute identifies as one of the subclasses, it will have NULL for all of the unused values. 8d: we have multiple flags that are boolean attributes. This allows for this multiple subclass identities (overlapping). Warmup Questions (10/9) # How to map shared subclass? A shared subclass, such as STUDENT_ASSISTANT, is a subclass of several classes, indicating multiple inheritance. These classes must all have the same key attribute; otherwise, the shared subclass would be modeled as a category. Note that the key difference here is that all of these super classes must have the same key attribute. We can map it similarly to step 8 with the 4 different options. How to map cateory type? We need to ensure that all of the super classes have a foreign key that comes from the primary key of the subclass that is inheriting the super classes. This is bc the subclass has a greater participation. Warmup Questions (10/14) # Characteristics of Relation Tuple -\u0026gt; data storage type that is unordered. The information just needs to be available and accessible. But when it\u0026rsquo;s stored in the hardware, it is indexable ofc. Attrbute Value in all attribute in tuple When we are inserting value for an attribute as well as denoting the specific attribute it applies to, then there is no order. What is the diff between relational database state and schema. Schema -\u0026gt; Skeletal structure of the attributes, entities, constraints, etc. State -\u0026gt; Data a certain point in time. All of the information must satisfy the requirements of the schema. Warmup Questions (10/16) # Constraints\nNot null -\u0026gt; the attribute cannot be null Key Constraint -\u0026gt; new tuples must have a unique identifier for its key Domain constraint -\u0026gt; the attribute information must exist within the set of the domain Entity integrity constraint -\u0026gt; The primary key must not be null Referential integirty constraint -\u0026gt; The foreign key is either the primary key that it\u0026rsquo;s referencing, or it can be null. There are different actions we can perform on a db that will have different possible violations Retrieve Insert Update delete Retrieve Insert Update Delete Not Null X Y Y X Domain X Y Y X Key X Y Y X Entity Integriy X Y Y X Referential integrity X Y Y Y Chapter 6 SQL(10/16-Present) # Introduction # SQL query commands should be fully capitalized, and database names will be stored fully lowercase.\nIt\u0026rsquo;s a good idea to get into the habit of highlighting the queries you want to run, you generally don\u0026rsquo;t want to run all of them at the same time.\nData Types # Numerical\nInteger: INTEGER, INT, SMALLINT Floating-point: FLOAT, REAL, DOUBLE PRECISION Database Table # Primary Key Declaration # You can do it in line if there\u0026rsquo;s only one primary key, but if it\u0026rsquo;s composite, you must do it at the very end separately. create alter insert update delete select statements Types of Restrictions # Cascade -\u0026gt; When we drop a table, we have to remove all of the information that references that table from other tables Restrict -\u0026gt; If there are other views that reference the information in the table we would like to delete, we stop that operation from occuring. Set Null -\u0026gt; Whenever we make a change to the table, referenced information should be set to Null Set Default -\u0026gt; Creating Constraints # We can create constraints with names. We can easily apply and remove this constraint with this name. Actions and constraints # INSERTION Cascade it -\u0026gt; change all values in referenced tables DELETE Set NULL CREATE Set DEFAULT SELECT (there is an order to the parameters and are optional) FROM -\u0026gt; filters what information to return (entire tuples or just a name, etc.) WHERE -\u0026gt; filters by a condition GROUP BY HAVING ORDER BY ALL -\u0026gt; will allow null values to exist in the query DISTINCT -\u0026gt; will give us only the distinct values Changing structure of the database # We would want to use the ALTER TABLE command. We could either: Add column Drop column Add constraint Drop constraint Rename column SQL Query Examples # Insertion Explicit SELECT * FROM COMPANY.dept_locations; use company; INSERT INTO dept_locations (Dlocation, Dnumber) values (\u0026#39;Mckinney\u0026#39;, \u0026#39;1\u0026#39;); Insertion Implicit tbh too lazy to write this one out. basically we don\u0026rsquo;t specify which attribute we\u0026rsquo;re updating. it expects us to follow the ordering of the entity single update without violation SELECT * FROM company.department; UPDATE department set DName = \u0026#34;Research AI\u0026#34; where DNumber = \u0026#34;5\u0026#34;; single update WITH violation SELECT * FROM company.department; UPDATE department set DNumber = \u0026#34;6\u0026#34;; where DName = \u0026#34;Research\u0026#34;; multi update: two records are updated where their essns were of the matching value. UPDATE works_on SET hours = 42.5 where essn = \u0026#39;987987987\u0026#39;; all update: This will have an error because we are in safe mode. UPDATE works_on SET hours = 42.5 multi update: multiple attributes can be updated depending on conditions of AND/OR General Notes over queries: # Not Equal is represented by \u0026lt;\u0026gt; When we are cross referencing two different tables, it is good practice to QUALIFY where data is coming from, even if the attributes are unique. Ex: SELECT employee.fname, employee.lname FROM employee, department WHERE department.dname = \u0026lsquo;research_ai\u0026rsquo; AND employee.dnumber = department.dno If you want to include NULL values in your query, use the SELECT ALL statement LIKE keyword For searching within attributes such as looking for \u0026ldquo;Texas\u0026rdquo; in an address attribute will pull up all of the addresses in Texas. We can use % and _ to help us filter it out. % can replace any number of characters, kind of like the wild card _ will only replace a single character as wildcard Exam Review: # Ch. 6 - Basic SQL\nKnow how to create these things: SCHEMA TABLE Operations on the database: INSERT DELETE UPDATE Additional Keywords: PRIMARY KEY FOREIGN KEY UNIQUE SET VALUES ALTER Querying on the database: Basic syntax: SELECT __ FROM __ Additional syntax: WHERE GROUP BY HAVING ORDER BY ALL DISTINCT AS -\u0026gt; Used for renaming LIKE -\u0026gt; Used for pattern matching IS -\u0026gt; Non-arithmetic matching IS NOT -\u0026gt; Non-arithmetic matching for not equal. Alias -\u0026gt; We can rename things within the query to make typing more efficient. Ex: FROM employee e, department d WHERE e.dno = d.dnumber Instead of: FROM employee, department WHERE employee.dno = department.dnumber Rename -\u0026gt; We can rename the attributes in the SELECT arguments which will only affect the output of our query. This is especially useful when either the attribute name isn\u0026rsquo;t clear, or we perform an aggregate function such as sum(), avg(), count(), etc. Ex: For each department, retrieve the department number, the number of employees in the department, and their average salary. In the example below, we are renaming COUNT(\\*) to \u0026rsquo;emp_count\u0026rsquo;, and we are renaming the AVG(e.salary) to \u0026lsquo;avg_salary\u0026rsquo;. Without renaming, the column name would simply state \u0026ldquo;Salary\u0026rdquo; which is not true.![[Pasted image 20241024113358.png]] Arithmetic Operator -\u0026gt; We can include arithmetic conditions in our queries to filter the output. Ex: Retrieve all employees whose salary is between $30,000 and $40,000. ![[Pasted image 20241024113721.png]] Pattern Matching -\u0026gt; This is how we can filter through information within the attribute itself. Ex: Retrieve all employees whose address is in Houston, Texas.![[Pasted image 20241024113932.png]] What\u0026rsquo;s the difference between % and _? You use _ to match any single character and % to match an arbitrary number of characters (including zero). Say you want to find all people whose name starts with G, you can say WHERE e.fname LIKE \u0026quot;G%\u0026quot;; Whereas if you wanted to find all the people whose birthday is in March, you can say WHERE e.bdate LIKE \u0026quot;____-03-__\u0026quot; An important consideration for pattern matching is knowing whether the attribute is a VARCHAR or CHAR. It\u0026rsquo;s easier to use _ when there\u0026rsquo;s a set number of characters such as in a CHAR type. You can read more about this [here](MySQL :: MySQL Tutorial :: 4.4.7 Pattern Matching) Order By -\u0026gt; This keyword allows us to alter the way the output is sorted. Ex: Retrieve all employees\u0026rsquo; salaries and in ascending order. ![[Pasted image 20241024115310.png]] Note that ORDER BY is ascending order by default. To change to descending, you must employ the DESC keyword. Order By will also work on alphabetic strings. We can also have multiple columns in ORDER BY. This means that in the case that the first column has a conflict (same value), it\u0026rsquo;ll then sort by the second column. Having -\u0026gt; This keyword is used to combine Conditions and GROUP BY. Ex: For each department where the num of employee \u0026gt;= 2, retrieve the department number, the number of employees in the department, and they average salary. WU (10/21) # Create table statement for DEPARTMENT and DEPT_LOCATIONS CREATE TABLE company.DEPARTMENT Dname VARCHAR(20) UNIQUE, Dnumber INT PRIMARY KEY, Mgr_ssn CHAR(9) NOT NULL, Mgr_start_date DATE FOREIGN KEY (Mgr_ssn) REFERENCES EMPLOYEE(Ssn) CREATE TABLE company.DEPT_LOCATIONS Dnumber INT PRIMARY KEY, Dlocation VARCHAR(30) PRIMARY KEY\nChapter 7: More SQL # Clauses\nHAVING IS GROUP BY Aggregate functions:\nCount Sum Avg Min Max Views # A view is a non-physical representation of the physical table. We can use VIEWS to filter a data set and make queries on it later. It makes our future queries less complicated when we already know the constraints. ![[Pasted image 20241030123044.png]] Join # We can separate join into two types\nInner Join -\u0026gt; Always return the information of the tuple that is matched on both sides. JOIN is how we can connect two tables together. Equal Join -\u0026gt; Natural Join -\u0026gt; Will join two tables with the same attribute name. So you don\u0026rsquo;t need to ON clause. Multiway JOIN -\u0026gt; We can join multiple tables together based off of unique identifiers. Outer Join -\u0026gt; represent matched tuple, and also tuples that don\u0026rsquo;t have matched value. It\u0026rsquo;ll use NULL for the non matched values. Left Outer Join Right \u0026quot;\u0026quot; -\u0026gt; WU (11/4) # What are some aggregate functions? COUNT SUM AVG MIN MAX Which of these functions ignores NULL values as part of its calculation. SUM, AVG, MIN, MAX For COUNT, to consider NULL we need to use non-generic COUNT. e.g. COUNT(salary), instead of COUNT(*). When do we use GROUP BY and what does the HAVING keyword do. GROUP BY will group based on a condition, but because of the cross product, we will have duplicate tuples. This is why we use HAVING, to filter the output again to get rid of the duplicates. WU (11/6) # What\u0026rsquo;s the difference between inner and outer join? Inner join combines tables that have matching values Only displays output that has common attribute. Outer join combines tables regardless of matching values. Left outer join - Will display all left side tuples and possible corresponding rightside values, or NULL otherwise. Right outer join - Will display all right side typles and possible matching left tuples, or NULL otherwise. GROUP BY purpose? To partition relations into subsets Ch 14: Basis of Functional dependencies and Normalization for Relational Databases. # Normalization -\u0026gt; It\u0026rsquo;s the formal guideline to discern whether a certain design is good or not.\nThe 4 informal metrics of bad db design # Each tuple in a relation should represent a single entity or instance. The attributes of other entities should not be mixed in the same relation. Ex: Instead of having an EMP_DEPT entity that stores information of the employee and the department that they work in, it is better to separate that information into two separate tables, especially if they aren\u0026rsquo;t 1:1 and total participation. Redundant information in Tuples and Update Anomalies Redundant Information: Within a single column, if the values are NOT unique, i.e. department number, d_location, etc. it is best to put them into separate tables and match using the primary key. Anomalies: Update -\u0026gt; We have to change multiple tuples when we update. Insert -\u0026gt; We cannot insert a tuple\u0026rsquo;s information unless an employee is assigned to it. Delete -\u0026gt; Say we remove department number 5 attribute. We would have to remove the entire tuple that contains information that matches the department. Reduce the number of NULL values as much as possible If an attribute has frequent NULL values, it is best to create a separate table to house that information with the PRIMARY KEY Avoid the generation of Spurious (invalid) tuples. Make sure that your joins, we have one primary key, and one foreign key. Formal measure of how bad design can be transformed into good design. # Normalization approach/approach -\u0026gt; Decompose a big table into smaller tables. You get to discern at which point it\u0026rsquo;s too atomic. Hierlogical process because you HAVE to go step by step. For anything to be in the third normal form, it must have first been a first normal and second normal form. First -\u0026gt; We cannot have composite, multivalued, or nested (complex) attributes. Solution1: Create a new relation/table w/ the primary key of the original table, and the single attribute that violates. This is the best solution, the others are not good. Solution2: For the multi-valued attribute, create more instances of attributes to accomodate for the multiple versions. The issue here is we will have NULL values for other tables. Solution3: Pair up each individual attribute value with the primary key. The issue here is the redundancy of information. Solution4 (complex): Create two new tables, one that has all of the Non-complex attributes, including the primary key. And then Another table that has ONLY the complex attribute split up, and then also the primary key, whilst making one of the complex attributes that was split into a primary key. Second -\u0026gt; Every non-prime attribute of a relation should be fully functionally dependent on whole keys, not part of the key. Solution: Identify which attributes are not fully functionally dependent. We then create new tables that contain only the attribute itself and whatever primary key is requires. Essentially, if we have 3 relations of dependencies, we will need 3 separate tables for each level of dependency. Third -\u0026gt; The non-prime attribute should not depend on another non-prime attribute. There should not be a transitive dependency. BCNF -\u0026gt; Rare but possible. Fourth -\u0026gt; Super rare Normalization Functional Dependency (FD) -\u0026gt; Specifies relation between different attributes. And that relationship becomes a constraint in a relational schema. Good Ex: SSN value determines the value of the Fname, Minit, and Lname. The reason why this is a good example is the UNIQUENESS of the output attribute. Bad Ex: Department Number determines the value of Department Name. So every time Dnumber = 5, Dname = \u0026lsquo;Research\u0026rsquo;. This is poor practice because every Dnumber of 5 will have a Dname of research. Instead of a functional dependency, this information should instead be stored as a base relation. This is because X is not a PRIMARY KEY. Key -\u0026gt; A minimal super key. The smallest combination of attributes that can provide uniqueness. Super key -\u0026gt; Any combination of attributes that can provide uniqueness. Candidate Key -\u0026gt; When you have multiple unique identifiers, these are all considered candidate keys. We can arbitrarily assign one of them as the Primary Key, and everything else is a secondary Key. Prime Attribute -\u0026gt; Attribute that is a member of a candidate key. Careful with composite keys, each of their attributes are prime. Non Prime Attribute -\u0026gt; Attribute that is NOT a member of a candidate key. Basically it is not uniquely identifying. Full Functional Dependecy (second form) (FD) -\u0026gt; Specifies a relationship Y -\u0026gt; Z, where any key attribute lost in Y will break the dependency. Transitive Dependency (third form) -\u0026gt; Suppose we have an FD x -\u0026gt; z. it can be drived from x-\u0026gt;y and y-\u0026gt;z Ch. 30 - Database Security # Common Threats # Unauthorized Privilege Escalation # Describes the attempt of increasing the privilege level by attacking vulnerable points of the database. Privilege Abuse # Someone that has clearance of performing actions such as an adminstrator should not abuse this power and modify things that should remain untouched. Denial of Service (DOS) # The act of making resources unavailable to its intended users via overflowing the buffer. Weak Authenticatoin # A weak password can easily be figured out. This will allow an attacker to impersonate the identitiy of a legitimate user. SQL Injection # This is when an attacker adds extra information to the input of an SQL query. The purpose of this input is to change or manipulate the retrieval for the attacker\u0026rsquo;s advantage. Harmful effects of SQL Injection attacks Unauthorized data manipulatoin Retrieve sensitive data Execution of system-level commands Ex: could possibly execute a system-level command that would cause the system to deny service to the application for common users. SQL Injection Methods # SQL Manipulation # Most common form of injection attack This involves changing the SQL command in the application via: adding conditions to the WHERE clause expanding a query with additional components using set operations such as UNION, INTERSECT, or MINUS Code Injection # Function Call Injection # Warmup Questions 11/20 # What is SQL Manipulation vs Code Injection vs Function Call SQL Manipulation is when the attacker changes the SQL Query (such as the WHERE clause) to get more information than they\u0026rsquo;re supposed to. Code Injection is pretty similar to SQL Manipulation, but the key difference is you\u0026rsquo;re adding an ADDITIONAL LINE of code. Function call injection is when you insert an OS or hardware call into the code to be executed. For example, you can do a network command or open a file through an SQL query. You really could perform any system call. To combat a function call, we have to limit permissions. Restrict the command from being called or require a level of permissions. Explain SQL Injection Risk Factor: Database Fingerprint When the attacker can figure out what the type of database is being used, to tailor the attack that focuses on certain vulnerabilities. Explain SQL Injection protection technique: Bind Variables Using parameterized statements to protect against injection attacks Persistent Data vs transient data Persistent data is stored for a longer period. This is goign to be the important data that is access and processed frequently. Transient data only exists during program execution. They\u0026rsquo;re temporary. A database generally stores persistent data. Exam questions This line of code is what type of injection, and how can we handle these injections. What\u0026rsquo;s the solution Ch. 16 - Data Organization # Heap Structure # Information is in order of insertion, but not sorted in any particular way. We use file blocks to store the data. b represents the number of file blocks and record represents the number of records. Say that b = 3 and record = 2, then we have 3 file blocks and 2 records per block, which is 6 records in total. Insert -\u0026gt; A new record can easily be added to the end of the list. Constant operation. Search -\u0026gt; Retreiving data is much more expensive because it has to be linear. If there is one specific record we are looking for, we need to search on average b/2 disk blocks. If that record does not exist, then we must read all b disk blocks. Update -\u0026gt; Find the record, copy the information into the buffer, modify the information, and put it back into the same spot. Delete -\u0026gt; Find all records that satisfy the condition (Might need to go through all blocks). Copy the information into the buffer, delete from the buffer, and rewrite it to the disk. The disadvantage of this is the remaining unused record space. A solution for this is creating a new field/attribute called the deletion marker. This is simply a boolean indicator of whether or not the attribute is supposed to be removed or not. The problem still remains that we have unused space, and at a certain point we need to rearrange or storage. Ordered File # Information is stored and sorted by any specific field. It doesn\u0026rsquo;t have to be a key attribute, just any. However, there are some differences that arise from having a non-key field as the dependent. Key Field example: Say we use ID as the ordering field, then we are in order of ID. Non-key Field ex: Say we use State as the ordering field. The primary difference is the existence of duplicate ordering field values. This means that when we look for a specific record, we need to look within non-unique key values. Search -\u0026gt; SELECT * FROM student WHERE id = 3; This example uses the ordering field for searching. This means that the record reading is extremely efficient, especially if we use binary search. Search but not good -\u0026gt; SELECT * FROM student WHERE state = 'NY'; This is an example of how we might be using an ordered file structure, but not reaping any benefit because we are searching based on a non-ordering field. Insert -\u0026gt; Expensive operation. One option is to Initially keep buffer spaces in between each block to account for new records. But the issue will arise once the space is used. Another option is to use an overflow file. Requires periodical reorganization. For the overflow file itself, insertion becomes easier, but then searching becomes difficult again. Delete -\u0026gt; We can again use a deletion marker. Eventually we will have to reorganize. Update -\u0026gt; 4 different types based on two factors: search condition and field to be modified If the search condition is based on Ordering field -\u0026gt; Use binary search Non-ordering field -\u0026gt; Use linear search If the modified data is Ordering field -\u0026gt; We may have to change the placement of the record Non-ordering field -\u0026gt; We can change the record and insert it back in the same place. Hash File # Information is inserted based upon the hash field of the ordering field. The hsa function with randomize where the data is placed. We use the same hash function to access that record. The common internal hasing technique is h(K) K mod M where M is the number of max index number. Insert -\u0026gt; Search -\u0026gt; Delete -\u0026gt; Update -\u0026gt; One issue that we can run into is when our attribute addresses exceed the number of memory addresses. This will increase the likelihood of collisions. This is super common so don\u0026rsquo;t really worry about it. Collision -\u0026gt; The address where we are trying to store information is already occupied. Solutions to Collisions: Open Addressing -\u0026gt; Go to the next available address upon collision. Chaining -\u0026gt; Linked List concept Overflow block space. We place records in the overflow buffer upon collision, and we can find this address by adding an identifier of where we need to traverse to locate the record. Multiple Hashing: Keep applying hashing functions until we don\u0026rsquo;t get a collision. Ch 17 - Indexing # What is sorted data organization? Data is sorted based on a specific attribute Does this attribute need to be a KEY attribute? Nope! In an example of a student record, we can sort by Student_ID or GPA. Indexing is a helping tool to search for files and retrieve the data faster. So how does it work? The index file has numbered indexes that point to file blocks. It helps section off parts of the entire file structure. Reduce the total search space. Requirements: Files are sorted We have file blocks that are ALL indexed Index File -\u0026gt; Types of Single-level Ordered Indexes # Primary Index Specified on the ordering key field of ordered file of records Essentially a table can have many unique attribute properties, but only one of them will can be the ordering key field. Primary indexing is when we base the index on the ordering key field (primary key). The number of index records we will have is based on the number of file blocks we have. And the repsective index for each file block would be the first entry of each file block (known as the anchor record). Clustering Index Used for ordering field which is not a key field (no guaranteed uniqueness) Used if numerous records can have the same value for the ordering field. Or rather, it\u0026rsquo;s better used when you plan on grouping blocks via a certain attribute\u0026rsquo;s value that is common to many people such as GPA. The file block itself has one entry of index for each distinct value and they each will point to the first file block that stores that value. Seconday Index Can be specified on any non-ordering field Data file can have several secondary indexes. There are two variations Non-ordering key field Dense file indexing where we have an index for each searchable record. Non-ordering non-key field Solution 1: Dense Indexing where we create an index entry for every single record and each index will point to a unique record. Solution 2: Sparce indexing where we create another level of indirection. A second file structure that contains each unique value\u0026rsquo;s collection of addresses. This shit is so complicated man Concurrency # Many people accessing the same data at the same time. Lost Update Problem -\u0026gt; "},{"id":42,"href":"/docs/notes/university-notes/paradigms/","title":"paradigms","section":"University Notes","content":" Chapter 1: Preliminaries (8/19) # The significant difference between natural language and programmming language is ambiguity. Natural language has developed over time, and was not constructed by a team of engineers. Programming languages on the other hand were purposefully created to have unamibguous grammar, whereas english has ambiguous grammar.\nEnglish is SVO typology. subject-verb-object Starwars Yoda typology: object-subject-verb\nWhat is the effect of one language being ambiguous, and the other being unambiguous? # There is no set phonology of a programming language. This conversion from unambiguous grammar into ambiguous grammar, such as from code to english, leads to a possible misinterpretation of meaning (semantics). Example: Siri still struggles today with pronunciation. Language - Set of strings, sentences, and statements # English is recursively enumerable. It is possible to list every combination of sentences, but this list would be infinitely long because there is no upper bound, however this does mean that they are \u0026ldquo;countable\u0026rdquo;. Countable -\u0026gt; They map one to one (onto) each integer of the number system. There are some languages that are infinitely long, but also not countable. Turing complete or recursively enumerable? How can we realistically find the maximum length of a \u0026lsquo;valid\u0026rsquo; sentence? We could use grammar rules to define how sentences should be formed. Some of these rules include: syntax, semantics, and grammar. Syntax allows us to create order when structuring sentences. Semantics give sentences and words meaning and sense depending on context. Culture # every language has some sense of culture of people who are using those languages because they have experience and context. It takes time to adapt to these cultures, but they are not aways intuitive. So although things may be allowed, it may not be encouraged. Why are there so many languages? # We create new languages based on a need or desire: to solve a specific problem. If we put all the functionality of every language into a single language, it would be so bloated that it could not be efficient. Infinity, Ordinal Number Theory # There are variations of infinity. Infinity is a concept, not a number. Aleph null is an example of this, the cardinality of all natural numbers. It\u0026rsquo;s considered to be the smallest of the infinite symbols. Linguistics # LOGLAN was created to have unambiguous grammar, but still have meaning. Sapir-Whorf Hypothesis: Language can shape how we perceive and interpret the world. P vs NP # Polynomial Time vs Super Polynomial (nonpolynomial) Time The time it takes to interpret a particular language or sentence takes longer than O(n^k) Preliminaries Cont. (8/21) # First Programming Language # Ada Lovelace Bernouli sequence rational thingy The program was tabular, it didn\u0026rsquo;t go line by line from top to bottom, but could specify where to go after a line was ran. First High-level Programming Language # Plankalkul designed by Konrad Zuze in Germany between 1942 and 1945 Its original implementation was tabular, but in 1990, the first linear notation was developed. Although it was developed in the 1940s, this code already had floating point arithmetic arrays and more Files # It\u0026rsquo;s an abstract concept of a container. The way a file is stored on a disc is continuous and not a single entity. On computers, files are stored in blocks as a sector. We consider code in a single sector as a page. A single block or page size is 4096 bytes or 2^12 bytes. In hexadecimal, this is \u0026lsquo;h1000 How does a disk work? A page, or sector, or block in memory is always 4096 bytes. When we create a text file, it will immediately use 1 page worth of memory. Once the content takes up more than the limit, it will retrieve another page worth of memory to store this file. parse - The term we use to see if a compiler can make sense of the source code. The file type is important for a compiler. The extension of a file can be used solely for the use of naming, and not changing the content at all. For example, a .java file and a .py file are both plain text files. You can compile with either compiler and get the same output so long as its the same source code, and each compiler can make sense of the content. However, sometimes a file type could be INCOMPATIBLE with compilers such as .docx or .rtf This is because the content is not just plain ascii, but would instead contain formatting that would be extra information that the compiler doesn\u0026rsquo;t know how to make sense of it. Source Code Files # These files are purposed for a specific language, and this is identified by the extension. Ex: .py, .java, .pl, Integrated Development Environment: An IDE helps us program more efficiently by giving us color highlighting of certain key words, strings, variables, and data types. An IDE can come in the simple form like notepad++, or get more complicated such as with vsCode Esoteric Languages # Also known as joke languages. Many were created for research purposes and to test certain hypothesis, but none of them were created for the purpose of serious use. Whitespace This language understands and compiles whitespace characters such as tab, new lines, and spaces. The consequence of the creation of this program was the realization that a single program, a single source code can be interpreted in two vastly different ways by compilers. Thus it became very possible to hide information, which is the concept known as steganography. \u0026ldquo;Branflake\u0026rdquo; This language was created for the purpose of being the smallest turing complete language. It has no variables, only 8 characters that are individual scripts. Chapter 3: Syntax and Semantics (8/26) # Vocabulary: # Syntax - The structure of expressions Semantics - The meaning of the expressions and program units Sentence - string of characters of some alphabet Language - set of sentences Can be recursively enumerable. Lexeme - (Coloquoially we use \u0026lsquo;word\u0026rsquo;). Refers to the lowest level of syntactic unit such as a word, a variable, punctuation. Tokens - Category of its lexemes. Some token can have multiple lexemes, and in other cases it\u0026rsquo;s one to one Ex: int_literal, identifier are tokens that can refer to multiple lexemes. Ex: mult_op, equal_sign are tokens that only refer to a single lexeme. ![[Pasted image 20240826104425.png]] Language Recognizers # Generator - Device that we can use to generate sentences of a language. It is effectvive because we can compare a sentence syntacically to the generated structure. Recognizer - Device that checks every alphabetic character of a sentence and verifies if it exists in the alphabet or not. How can we describe syntax effectively? # We can use grammars, which are used to describe the syntax of programming language. Context-Free Grammars # A class of grammar used to describe the syntax of programming languages The reason why it\u0026rsquo;s called context-free because it doesn\u0026rsquo;t matter what the context is. $$G=(S, N, T, P) $$ G - Grammar S - Start Symbol N - Set of Non-Terminal symbols (tokens) T - Set of Terminal Symbols (lexemes) P - Set of production rules Backus-Naur Form # A subset of Context-Free grammar rules. Optimized for describing programming languages. Syntax description Remember, we want programmign languages to be as unamibguous as possible. Ambiguous language is defined by distinct parse trees. # If a grammar is unambiguous, the derived parse trees should be isomorphic. They have the same nodes and edges, but they may be visually different. Ambiguous language is not inherently bad, so long as we can prove that we can end up at the same result. Ex: 2 + 2 + 4 = 4 + 4 = 8 OR 2 + 2 + 4 = 2 + 6 = 8 Derivation # Sequence of repeated application of grammar rules. Reverse derivation: Start with the symbols, and replace them with non-terminal symbols going right to left. You can do the right-most derivation or left-most derivation. So long as the graphs are both isomorphic (same leaves and edges), they are unambiguous. A left-most derivation is like going down a binary tree in preorder. We expand the left most until we can\u0026rsquo;t, and then we go back up and then down right, until we reach the root node. Once we are back to the top, that is when we begin expanding the right side. The deeper a procedure is in a parse tree, the closer it is to the leaves, gives it higher precedence. That value must first be evaluated before it can be used in another context. Functional Languages # We place names on immutable objects instead of some variable shit bro i don\u0026rsquo;t know. Search up the difference ebtween imperative (procedural) languages and functional languages. A DFS will traverse an infinite depth for a recursively enumerable language. So we must use one variation of BFS whether it be post or inorder traversal.\nFunctional language vs non-functional languages # Racket is an eager functional language, which requires to know the content of all functions, even if they\u0026rsquo;re never called. There is a trade off between efficiency and security. and memory and speed. More ram, less disk space? There are many optimizations and trade offs that programmers can make, it all depends on what the goal is.\nEx: NASA doesn\u0026rsquo;t care about maxing speed, sending a probe is gonna take long regardless. They want to ensure accuracy of data. Ex: Facebook wants people to have timely and quick responses, even if the information may not be 100% perfect. One of the biggest things for this course is identifying what the \u0026ldquo;care abouts\u0026rdquo; or goals are for a project. And to find an appropriate language for that particular task. And this is what the word paradigm represents: What is the context (paradigm) in which we are trying to solve a particular task.\nAssociativity of Operators # ![[Pasted image 20240828104010.png]] This distinction is important. The reason the latter is unambiguous is because we\nHead recursion - Gives us a complexity problem. When we have right side recursion and right side expansion, then we are doing the recursion before we even build the tree. This is O($n^2$)\nTail recursion - \u0026ldquo;I have a concrete draft of what my tree is gonna look like, and I will do the recursion as my final task\u0026rdquo;. This is a linear runtime.\nParsing Terms # Recursion Type:\nLeft vs Right recursion will change the SHAPE of the tree Derivation Type: Leftmost vs Rightmost derivation regards the ORDER of a tree\u0026rsquo;s expansion Parse Direction Left-to-Right vs Right-to-Left Most of us read left to right Type of grammars # LL grammars and LR grammars\nThey have to do with the recursion and parse direction. The derivation type will always be the opposite of the recursion type because we want tail recursion. Ex: LL indicates Left Recursion parsing left-to-right Whereas LR indicates Left Recursion parsing right-to-left Extended BNF # We talked about building parse trees using grammars, but they also involve a lot of recursion. EBNF was created as another way representing using loops. The expressive power of EBNF does not exceed BNF.\nIt\u0026rsquo;s just adding some extra ways of expressing the same thing that makes it easier for humans. What are the differences between extended BNF and just BNF? EBNF provides are more concise syntax that is easier to understand. EBNF is used in most compiler compilers, like YACC and BISON YACC - Yet Another Compiler Compiler The Three primray differences / additions Optional parts are placed in brackets Repetition can be placed inside curly braces. We can place alternative parts of RHS inside parenthesis and separated via vertical bars, like an OR sign. Conversion Reminders for exam ==Removing explicit recursion means you can\u0026rsquo;t have any left hand term on the RHS== (9/4) # Semantics # How computers \u0026ldquo;think\u0026rdquo; about a particular programming language. Two different high level categories Static Semantics (Attribute Grammars and Context-sensitive Grammars) The feature of attribute grammar provides context. Ex: String x = \u0026quot;hello\u0026quot;; ``` int y = x; ``` Sort of like meta-data, it has more information for interpretation. Starts as an EBNF or BNF Attribute grammar is a context-free grammar But for each grammar symbol x, there is a set A(x) of attribute values For each rule, there is a set of functions and predicates. certain attribute values that can attached to the entire rule, either functions or predicates. Semantic happens at compilation, before we run. Dynamic Semantics # Operation Semantics - We are going to describe the assembly of what the code is doing. We use operational semantics to describe how a single block of code or algorithm works. To prove the correctness. Platform specific description Example: Converting a high level language to machine code or assembly. Blocks of code with different syntax can be proven to have the same operational semantics if the Meaning is the same. Denotational Semantics Mathematical representation. Syntactic - Verify that the math is legal? bro i dont know ==\u0026hellip;== Semantic - You verify that the syntax is a well-formed representation. Axiomatic Semantics Logical proofs. Logic programming Precondition and Postconditions. We desire to use the weakest precondition (the least restrictive) that satisfies the postcondition. Ex: a = b + 1 Postcondition - {a \u0026gt; 1} Weakest precondition - {b \u0026gt; 0} Possible precondition - {b \u0026gt; 17} Another example where we have multiple statements. Ex: y = 3x + 1 x = y + 3 Postcondition: {x \u0026lt; 10} To solve this, we must start from the bottom, our precondition for the bottom is: {y \u0026lt; 7} This precondition for the last line, becomes the post condition for the above statement. And thus we get a final precondition of: {x \u0026lt; 2} Functional Programming (9/11 - 9/16) # Random tidbits\nScheme started as a fork of LISP, made by two separate groups. The MIT people that forked it were forced to rename their program to Scheme. Racket (or raquet idk), is also a jab at the origin of the name of Scheme. 98% of the source code of racquet is similar to scheme. The Paradigms of Functional Programming # All functional languages are based on Lambda Calculus: $(\\lambda)$ Functions are first order: they can be arguments they can work as return values functions can build other functions i can pass a function to itself, and change the result: it can change itself. Anonymous functions - (# fill this in) Immutability - No such thing as a varaible in functional programming. When we set a value, we cannot change it. Similar to using Const in C programming. Don\u0026rsquo;t think about variables as creating a box and setting a value to it. Think of it more like we have an object with a value, and we are now going to NAME it. Like a POST-IT note instead of a shoebox. We can also stick multiple post-it notes to a value, and we can reference it via both ways. Python has a similar idea, though not purely functional, it has a lot of functional features. Purely functional ___ cannot have functional side effects.\\ Currying: every function will process the arguments as if they were separate functions with separate returns. No side effects: Functions will always return the same output for the same input. There is nothing within the state machine that can change, or global variable that is used that can be changed. LISP, Scheme, Racket, etc. uses explicit parenthesis, and then the descendants of ML: Haskell, Scala, etc. instead have an implied left associative. Loops require recursion because you can\u0026rsquo;t have an iterator. Lambda Calculus # Lambda Function: Lisp has list-based expressions All expressions are lists, and all arguments must be functions. Any \u0026ldquo;built-in function\u0026rdquo; is really just already defined and NAMED functions within the standard library from #lang racket. They\u0026rsquo;re defined anonymously. When we include this library, all of those function definitions get passed in. Examples: (define mysqr (λ (x) (* x x))) (mysqr 4.5) 20.20 (define divtwo (λ (x) (/ x 2))) (divtwo 100) 50 ((λ (x)(* x 3))50) 150 Key Words # lambda $\\lambda$ first, second, third car, cdr quote (`) quotient and remainder length Can do this with direct and indirect recursion reverse Can do this with direct and indirect recursion append Unlike cons, will return a single list with all elements combined in order. list Syntax: - Every lambda function has three characteristics - The Lambda symbol - Arguments - Body\nIn racket, we always assume the first argument is a function. Square brackets are equivalent to parentheses. We use it to differentiate and make our code more readable. List is a keyword that returns a list of the inputs what is the eq? key term in racket used for. S-Expression # You use the . for The dot operator is shorthand for an operator called \u0026ldquo;Cons\u0026rdquo; which is short for construction. We can cons something and add it to a list To create a dotted pair we can use the cons function\nexample: (cons 2 '(4 6 8)) -\u0026gt; '(2 4 6 8) Or we c an use the period: example: '(1 . (2 . (3 . ()))) car and cdr cdr stands for the Contents of the Decrement register. car stands for Contents of the Address part of the Register. Head and tail are equivalent terms for the above, but they must be explicitly defined. car, head, and first are interchangeable. cdr, tail, and rest are interchangeable Haskel variation They use colons and commas for the dot operator, and key words head/tail for car/cdr Define in Racket is just an equal sign in Haskell. Example car = head We can call cdr and then car to get the value of an index deeper in the list. We have keywords already created such as second, third, fourth, fifth, etc. cadr (second) caddr (third) How does this all work? If you look at an s-expression, you\u0026rsquo;ll see that from top down, everything is paired with connections and a dot operator. Whenever we use car or cdr, we are returning either the left or right side of the dot operator, where the left would be a leaf node, and the right would be the subtree of the other elements. If statements if function expects 3 curried elements, one that is supposed to be a Boolean, then two other bodies. If True, then the entire List becomes the left argument, else the right argument Example: (if #t '(1 2) '(3 4)) -\u0026gt; this evaluates to \u0026lsquo;(1 2) bc it\u0026rsquo;s true. else \u0026lsquo;(3 4) Boolean literals are #t and #f indiciating True and False Operations will return a value # (+ 4 3) (/ 15 3)\nRacket does allow for rational numbers. so if we were to run (/ 1 3), it would return $1/3$. ==If asked to evaluate this / operator, it should be a fraction, not a decimal number== Furthermore, if we instead have (/ 2.0 6.0), it would return 0.33333333 We can use either remainder or modulo to find that remainder. Evaluations will return a boolean #t or #f # (= 3 3)\nNote that this = sign expects only numbers as data types. can\u0026rsquo;t compare lists or strings. (eq? 4 4) Should be used when comparing scalar values such as numbers, ints, floats, strings, etc. But it has to be a single value, not a list (equal? \u0026lsquo;(1 2 3) \u0026lsquo;(1 2 3))\nCan compare any two values. Literally anything Functions for checking data types # You can define and put names on things, but these are just aliases. There is no expectation for this value to change, as a variable would. The question mark at the end indicates that the function is for humans to understand, and it\u0026rsquo;ll always return a boolean.\nlength number? complex? zero? string? integer? null? eq? (equal?)\nNote that we have many aliases for an empty list:\nempty null \u0026lsquo;() examples:\n(number? 4) -\u0026gt; #t (zero? 0) -\u0026gt; #t (zero? 4) -\u0026gt; #t (string? hello) -\u0026gt; hello: undefined (string? 'hello') -\u0026gt; #t (define hello 6) (symbol? hello) -\u0026gt; #f (integer? hello) -\u0026gt; #t (real? 3.4) -\u0026gt; #t (real? 5) -\u0026gt; #t Note that numbers that have a decimal can still be an integer if it trails with .0 Every number can be considered complex, because 3 = 3+ 0i, for all integers. all lists are pairs, but not all pairs are lists. a pair could be a pair if it\u0026rsquo;s strictly just two elements with no list inside. Once we add a third value, or there exists a list inside the pair, then it is no longer just a pair but also a list.\nnested lists and quotes Be careful to not double quote, because a cdr or car of a double list will either be a quote tick or the list of a list.\nSometimes you need to peel off the outer layer, so that the inside is not evaluated too early.\nDebugging # Hover over a fucntion and you can find its definition or origin, whether from previous code or an import from Racket.\nRecursion # We can create our own length function using recursion and the tail. This function works because the length of CDR is the length of list -1. What\u0026rsquo;s going on under the hood is we are removing one element at a time and adding 1 to length until it\u0026rsquo;s null. ![[Pasted image 20240918105601.png]] Direction recursion -\u0026gt; You can either build the expression by climbing in 1+ 1 + 1 + 1 + 0. Or you can climb out 0 +1 is 1 +1 is 2 + 1 is 3. Climbing in is when you dive until the base case, and add as we climb out.\nIndirect recursion -\u0026gt;When we use a helper, we pass it a list and an accumulator. We pass in the list and the counter. In this instance, when we hit the base case we return the accumulator value. There\u0026rsquo;s a trade off of memory and speed. Because we are constantly defining the accumulator value in order to increment it, the stack calls will bulid up, but if we have parallel processing, we can start the next operation and allow the stack to pop in the background.\nThis accumulator function is brittle. We have to initialize this counter at an arbitrary value that the user can input, because it needs to be called every single time. To combat this, we can use a wrapper function, which initializes the previous function with the same input list, but with a hard coded 0 initialized.\nNote that, a programmer could still run the accumulator function and still potentially get a bad answer. To combat this issue, we use scope. We can hide the accumulator function in another function. Just like Java, functional programming has function locallity. when the body of the functions returns back to the caller, everything we defined no longer exists. Advantages: we can fix weaknesses such as exposure of helper and accumulator Faster in some cases easier to understand SYNTAX OF FUNCTIONAL PROGRAMMING # The entire syntax is based off of just these three rules:\nEverything in a lambda expression Each expression is either a name, function, or application. A compiler for a functional language can be created in one hour by a single person, whereas a language like java took a team over a year. Errors # Contract violation is a data type error.\nChapter 4 - Lexical and Syntax Analysis (9/30-current) # Project Details # \u0026gt; 6 6. similarly to range, start with an integer and loop that many times. direct recursion, decrement the count value. once im at the end of the list and the value is 0, then we return True, else we return false. 7. This question has many lines. Requires helper functions. Mod 10 algorithm\nAnalyzer # How do we do this with prgramming languages. How do we determine all of the words are corect for the language/ Lexical and syntactical analyzer\nTHe syntax analysis portion consists of two parts:\nThe low-level part: the lexical analyzer. Tries to determine if any of the characters represent a proper lexeme. The high-level part: the syntactic analyzer or parser. example: soijw sofijew fwoiejf Thsi has no valid lexemes, thus the parser would reject this. Lexical and Syntax Analysis # Why do we use bnf to describe syntax?\nbecause it\u0026rsquo;s easy for humans to understand bnf. The rules are easy to understand. They are easy to maintain: making changes can be done by just adding a new rule, and it wouldn\u0026rsquo;t affect the other rules. The reason we split parsing into the lexical and syntactic parts is because it simplifies the complexity of the parser. We can make a parser that\u0026rsquo;s one level deep, but it\u0026rsquo;s not good to use. Essentially, doing these two separate processes makes it more efficient and simple. Also portability. Parts of the lexical analyzer may not be portable, but the parser always is portable. [[Lexical Analysis]] # We need a state machine that is reading each character one by one, and moving states. So basically this lexical analyzer is a finite state machine that looks at individual characters are identifies what this word can mean. If it first sees a character, it\u0026rsquo;s expecting this entire string to be either a variable or a function name and will keep looping alphachars until it stops seeing that. Once it finishes matching a character pattern, it\u0026rsquo;ll then be associated together as a token. And this token can represent many things DEPENDING on it\u0026rsquo;s starting character. if it starts with a number, then the token could represent a float or an integer. If it\u0026rsquo;s an alpha char, then it could represent a variable or a function. The lexical analyzer is generally implemented as a function that is called by the parser when it needs the next token. Three approaches to building a lexical analyzer Initialize a formal description of the tokens and a software tool taht constructs a table-driven lexican analyzer from such a description. Design a State machine that describes the tokens and writes a program that implements the state diagram. Hybrid: Design a state diagram that describes the tokens, and then manually construct a table-driven implementation of the state diagram. Simplification the state process If we had to map to every single variation of alphachar, our state machine would be ginormous, so instead we can point to a character class that groups all of them together. Lookup For identifiers such as variables and functions, the lexeme parser will verify that only after it has iterated through all of the characters in a word. Parsing problems # What is the goal of the parser? Find all syntax errors Generate the parse tree for the source code being analyzed. What do we do when we run into an error? For each error, we need to create an appropriate message that conveys the issue. If no error is found, then the program will go ahead and create the parse tree, which can be converted into assembly. Two Categories of Parsers\nTop down- Makes a tree starting at the root We need right recursion and the expansion requires leftmost derivation Bottom up - Makes a tree starting at the leaves We build up from the bottom, so we use left recursion. So we don\u0026rsquo;t recurse until the end. This is tail recursion Order of node rduction uses rightmost derivation. Depending on the grammar that we want to use, this will dictate the type of parser that we want to use. The architecture/shape of the tree. Neither is better or worse, just depends on whta tools you have at your disposal. Most common top-down parsing algorithms ==These are LL Parsers==\nRecursive descent -\u0026gt; expands recursively downward into all children Table driven implementation -\u0026gt; Used in Assembly because we can\u0026rsquo;t make functions, we can only use predefined machine tools. Uses a parsing table where you find the meaning of lexemes. Recursive-Descent Parsing Continued # top down parser In the source code, we\u0026rsquo;ll have a function for every single grammar rule. If they expect some element or another, we\u0026rsquo;ll have if and else if statements, followed by an else that will throw an error. As we go through each element, we check for tokens,we check for lexemes, and we\u0026rsquo;ll check for expression.\nThe LL Grammar Class # Remember, LL means it\u0026rsquo;s left Recursion with left to right parsing E rule replacement\nDetecting (not correcting) Indirect Left Recursion Pairwise Disjointness\nFor every RHS rule, we call the FIRST method to create a set of elements. We compare these sets to see if there are any intersections. \u0026ldquo;Is the A rule safe using the Pairwise disjointness test\u0026rdquo; Example: A = ab |bc |cd first(ab) = {a} first(bc) = {b} first(cd) = {c} Now we have to check for disjointness by intersecting every combination of pairs {a} $\\cap$ {b} = {} {a} $\\cap$ {c} = {} {b} $\\cap$ {c} = {} Because we have no intersection, we have disjointness] Bottom Up Parsing # One of the most common ways is using shift-reduce. We have right most derivation with left recursion. So how can we injest code into our parser right to left, if we are reading it left to right. We use a stack. We read the elements from left to right, but we are reducing chunks from right to left. Shift-reduce Parsing # This one is somewhat complicated but not really. We push into the stack the first element from left to right. As we add symbols, our state will be in different machines, and depending on the state and the next symbol we push, we will have a different action. Keep going through one by one until the end is reached. Chapter 16 - Logic Programming (prolog) # Definitions # Axioms -\u0026gt; a set of rules that are either true or false Source code -\u0026gt; Knowledge Base Resolution -\u0026gt; logical inferencing process. The program will intuit what an arbitrarily defined value may be. hypothesis base -\u0026gt; the possible evaluations that could evaluate to true\nProlog Syntax # logical and -\u0026gt; , logical or -\u0026gt; OR end every statement with a . write()\nIntroduction # Programs in Logic Programming are expressed in the form of Symbolic Logic This symbolic language is easier to process for humans to intuit because it\u0026rsquo;s based upon human logic instead of machine logic. Use a logical inferencing process to produce results declarative rather than procedural only specification of results are stated (not detailed procedures for producing them) You define what the results look like, and the run time will figure out how to produce those results. This is resolution. You cannot return values, only evaluate to True or False Random note -\u0026gt; predicate (proposition) vs function vs method. Different procedures\nStatements # A logical statement is a predicate/proposition that comprises of these elements objects, relationships, and evaluation value Example: student, mexico, has visisted, false Both the input and the output are in the predicate call ex: add_one(4,5) evaluates to true Essentially we are testing if our conclusion is valid. Checking if our answer is correct When there is insufficent information, we use Resolution. The program will assign a value to Var that would make our conclusion true ex: add_one(4,Var) evalutes to Var = 5 Our program can actually find multiple evaluations that would make evaluate to true. Thus our goal is to write rules that are specific enough to narrow down the possible solutions. Symbolic Logic # The code can only evaluate propositions based off of the knowledge base. Don\u0026rsquo;t get caught up in trying to make sense of things in relation to the real world. We are only working off of rules that are defined by the programmer. What is computable, and what is complex? A complex problem is computable, but it\u0026rsquo;ll take a long time. Object Representation # Variables in logical programming differs from procedual programming. Instead of the programmer declaring and instantiating the value, the program will instead find all possible values that may evaluate to true at a given time. Now this could lead to a tremendously large computational problem. Our Types of terms # Atomic Compound Functor/predicate The symbol that names the relationship No return type or value Parameters An ordered list of parameters (tuple) Not arguments Unification (equality) # ex: 6 = 6 Note that this equal sign is not assignment. ex: x = 6 this is not assigning 6 to x. instead it\u0026rsquo;s computing the value that makes this equality true (unified) is x containing the value 6 ex: Var = 2 + 3 In this special case, unification will compute Var as 2 + 3, and not as 5 and this is because this Var could be any infinite combination of operations that evaluate to 5, thus we assign it the exact value. ex: Var is 2 + 3 The is key word will evaluate the operation. Lists # Square brackets and comma separated ex: `[1,2,3,4] = SomeList SomeList will have the entire List as its value ex: `[1,2,3,4] = [1,2,X,4] X will be assigned the value of 3 ex: `[1,2,3,4] = [X | Y] So this part is a little confusing. X will take the first element, and Y will take the rest so X = 1 Y = [2,3,4] ex: [1][2,3,4] = X X will be assigned a complete list of [1,2,3,4]. Having two lists side by side is the equivalent to cons in Racket ex: [1,2,3,4] = [X, Y, Z] This will evaluate to False. There is no combination of these three variables that can create a list of 4 elements. Generally right now I\u0026rsquo;m most confused about | vs , _ is a placeholder key variable. The program will know that we do not care to use this value. Don\u0026rsquo;t Care variable. Head(SomeList, Head) :- SomeList = [H | _], Head = H. Head([H|_], H). This code block shows the predicate of finding the Head of some list and its one line version (which is more typical of prolog). cons(H,InList,OutList) :- OutList = [H|T], Elem = H, InList = T. cons(H,T,[H|T]). In this code block, we built a predicate that will append an element to the front of the list Ex: cons(7, [8, 9, 10], Out) leng([],0). % this is a base case for when we have an empty list. leng(SomeList, Len) :- SomeList = [_|T], leng(T, Tlen), Len is Tlen + 1. leng(SomeList, Len) :- SomeList = [_|T], Len = leng(T, Tlen) + 1. Recursive call to find length. We need a base case, if we don\u0026rsquo;t the unification statement will evaluate to False. Note that the base case here is an overloaded definition of the same predicate. Generally it\u0026rsquo;s advised to check for base cases within the same definition such as in the example below. leng(SomeList,Len) :- SomeList = [] -\u0026gt; Len is 0 ; SomeList = [_|T], leng(T, TLen), Len is TLen + `. is_sorted(SomeList) :- SomeList = [] -\u0026gt; true; SomeList = [_] -\u0026gt; true; SomeList = [H1,H2|T], H1 =\u0026lt; H2, is_sorted([H2]T]). Though it\u0026rsquo;s possible to use overloaded predicates for the base cases in tandem with !. (cuts), but it\u0026rsquo;s ill advised. rev([],[]). rev(InputList, OutputList) :- InputList = [H\\T], rev(T,TRev), append(TRev, [H]). H is a single element, and [H] is a singleton list. This implementation is similar to racket, but the difference is: In racket you expect to see append rev(T) head(lst) but in Prolog, we can\u0026rsquo;t recursively obtain the Rev(T) through the predicate, instead we need to call rev(T, TRev) independently and use the output of that call.\nrev2(InputList, OutputList) :- InputList = [] -\u0026gt; OutputList = [] ; InputList = [H|T], rev2(T,TRev), append(TRev,[H], OutputList) This is the version of rev that doesn\u0026rsquo;t use the overloaded base case. Also another reminder, we can pass the assignment of our InputList directly into our function, i.e. rev2([H|T], OutputList) :-\nAccumulator version of rev\nrevAcc([], OutputList, Acc) :- % this is the overloaded base case OutputList = Acc. revAcc(InputList, OutputList, Acc) :- InputList = [H|T], revAcc(T, OutputList, [H|Acc]). % input query revAcc([2,4,6,8], R, []). But how can I ensure that the third argument is always empty? We can wrap this in a helper and call the helper with the empty list argument.\nrevAcc(Input,Output) :- revAccHelper(Input, Output, []). revAccHelper([], OutputList, Acc) :- % this is the overloaded base case OutputList = Acc. revAccHelper(InputList, OutputList, Acc) :- InputList = [H|T], revAccHelper(T, OutputList, [H|Acc]). % input query revAcc([2,4,6,8], R). add1(X,Y) :- Y is X + 1. This is just to reiterate that we these predicates themselves will return a true or false, but the output variable will hold the value that makes it true.\nlast(SomeList, L) :- rev(SomeList, RevList), head(RevList,L) LastB([L],L) :- !. LastB([H|T], L):- LastB(T, L). Here we have two different implementations of finding the last element in a list. The top version is inefficent, we call reverse and grab the head of the list. In the bottom version, we have a base case of when the List is just a single element, and we return that element immediately.\npenultimate([L,_], L) :- !. penultimate([_|T],L) :- penultimate(T, L). This is the similar to Last but instead of the ultimate eliminate (last), it\u0026rsquo;s the penultimate (second-last)\nProject question for prolog Index We can keep calling recursively by decrementing the counter, and grabbing the 0th index (head) of that recursive calls list.\n% example input index(input,output, 0) :- !. index(input, output, index) :- Logical Operators # We use the -\u0026gt; symbol with a ; to separate the then/else ex: `true -\u0026gt; write(\u0026ldquo;Yes\u0026rdquo;); write(\u0026ldquo;No\u0026rdquo;). Yes true OR: ; AND: , CUT: !. For logic we have symbols such as -\u0026gt; ; , ! ==I don\u0026rsquo;t completely understand these symbols, read the documentation for this== Constants vs Variables # Camelcase is a variable all lowercase is a constant Chapter 5 - Names, Bindings, \u0026amp; Scope # Scalar Variables # Single values that get dynamically converted. the meta character will specify the data type that is being stored. @ signifies a list To print the entire list, we have to use print(@y); When we try to print this list using a $ meta char, it\u0026rsquo;ll only expect one value. In this instance we need to specify a specific index for the output to correctly generate. Static Scope # A runtime will look first locally, and then increasingly larger scopes. If it can\u0026rsquo;t find a variable locally, it will look within its next enclosing scope. You can change where the runtime looks for a variable value in languages such as Perl, Ada, and Python. Unit is the name of the function to look inside, and name is the variable name. Essentially, we have an X value in main, that is eclipsed by the nested function. However, we can look behind the eclipse through this function. Ex: unit.name or $unit::name -\u0026gt; $main::x Let (in racket) # The only purpose of LET is to declare local variables within a new scope to use without modifying the original values. Declaration Order # The major difference between C++/Java/C# and C. In C++, you can declare a variable within the scope of a for statement. Whereas in C, we must declare the variable before the for loop begins. It\u0026rsquo;s pretty incredible how every control flow statement is based off of either an IF or a WHILE. But we can combine these in combinations to create any other control flow statement such as DO WHILE, FOR EACH, etc. Global Scope # Some languages allow you to alter the value of a global variable within a nested scope globvar = 0 def set_globvar_to_one(): global globvar # Needed to modify global copy of globvar globvar = 1 def print_globvar(): print globvar # No need for global declaration # to read value of globvar print_globvar() # Prints 0 set_globvar_to_one() print_globvar() # Prints 1 Dynamic Scoping # ![[Pasted image 20241111105647.png]]\nChapter 7 - Expressions and Assignment Statements # Arithmetic Expressions # Arity The number of operands that can be had by an operator. unary operator: takes one operand - negation ++ increment pointer \u0026amp; dereference binary operator: has two opernads +, -, /, %, $**$, $*$ ternary operator: has three operands ? : Conditional if then else Precedence What do we prioritize in operations? Most languages use \u0026ldquo;PEMDAS\u0026rdquo;, but some languages like ALO and has no operation precedence. Associativity This is the order in which adjacent operators with the same precedence level are evaluated, e.g. 3+5-2 or 4*2/4 Typically we go left to right, except ** which is right to left Evaluation Order Describes how we access and process operands within an operation. Variables are retrieved to be used Constants are also retrieved to be used but comes from either memory or from the machine language instruction such ax MAX_INT Parenthesized Expressoins: Evaluates the content of the paren first Functional Call: Evaluates the function first, but a possible side effect is the modification of the a value that will be used within the operation that it\u0026rsquo;s a part of. Conditional Operators (ternary) An alternative way of expressing the if then else control structure Ex: average = ((count == 0)? 0 : (sum / count)) The equivalent ![[Pasted image 20241113133612.png]] Potentials for side effects Functional side effects: when a function changes a two-way parameter or a non-local variable. What\u0026rsquo;s the problem with functional side effects? The program may behavior unexpectedly. ![[Pasted image 20241113133833.png]] Referential Transparency: If after I execute a function, does it change some of the parameters that i passed into it. To check for this, we can declare a temporary variable that is assigned to a function\u0026rsquo;s evaluation, and compare the result of operations using the two original variable, and the temporary one. Benefits: Semantics of a program is much easier to understand Pure functional languages such as Perl are by nature referentially transparent. These functions cannot have a state Any values that a function obtains from outside its block must be constant. Operator Overloading Allows us to use an operator with additional purpose. This occurs much more often than we assume. Ex: \u0026ldquo;Hello \u0026quot; + \u0026ldquo;World\u0026rdquo; is concatenate instead of arithmetic addition. Ex: 4.3 + 2.5: adding floats is a much different operation/process than adding two integers. How do we handle type mixing?\nUsually we would have a protocol for determining data type precedence. Ex: 4.5 + 3 evaluates to 7.5 in python, but in C++ if we declare as int, then we keep the type consistent unless we cast. Chapter 8 - Statement-Level Control Structures # Two-Way Selection Statements # The general form is if then else The absense of the then keyword is generally replaced by parenthesis. Loops # Can be accomplished by either iteration (with counters), or recursion Counter-Controlled Loops Initial loop value is generally of type integer. Has some state that it identifies as a terminal state. Once the counter contorl reaches some state, then the loop will terminate. Step size values -\u0026gt; How does the counter get changed with each loop level Essentially, we keep going until a statement is reached, which will then lead us to terminate the loop Range-based For Loops These consider a collection or set to be iterated over. Advantages Miniimzes the change of range out of bounds error Disadvantages Can\u0026rsquo;t iterate through a slice of the collection (a subset). Logically-controlled loops (WHILE loops) Design issues Where do we put the test? Pre-test or post-test? Should a logically controlled loop be a special case of the counting loop, or a separate statement. In C, you can actually make a while loop that is more efficient that a for loop with the standard counter procedure. User-Located Loop control mechanism Simple design for single loops (e.g. break) Design issues for nested loops Should the conditional be part of the exit? Should control be transferable out of more than one loop? Iteration based on Data Structure Java 5.0 can also the the for items in array. Unconditional Branching # Guarded Commands Combines programming in a concise way, based on the semantics for formal logic and proofs so that if the code compiles correctly, then the semantics are proven to be correct. It\u0026rsquo;s embedded in some languages such as ADA. Baesd on Tony Hoare\u0026rsquo;s Hoare logic. Selection Guarded command Multiway selector -\u0026gt; [] \u0026lt;Boolean expr\u0026gt; -\u0026gt; \u0026lt;statement\u0026gt; [] \u0026lt;Boolean expr\u0026gt; -\u0026gt; \u0026lt;statement\u0026gt; [] \u0026lt;Boolean expr\u0026gt; -\u0026gt; \u0026lt;statement\u0026gt; ... [] \u0026lt;Boolean expr\u0026gt; -\u0026gt; \u0026lt;statement\u0026gt; fi``` If more than one of these switch statements are true, we choose on at random. If none are true, it is a runtime error. "},{"id":43,"href":"/sermons/how-can-we-have-faithful-works/","title":"How can we have faithful works","section":"Sermons","content":"series: Acting in grace together\nverse: James 2:18-26 Faith without works is dead.\nGod calls us to be a community of love. And this can be achieved even with a group of people that share no interest or have similarities. All we need is God.\nThere are two pitfalls\nChristians not doing good works. Christians that do good deeds for the wrong reason. How can we joyfully and effectively work to be a gospel centered community?\nWhen does work have no power? When it is fueled by the flesh When we try to earn God\u0026rsquo;s favor. This happens when your attitude and thought process involves pleasing God. You are also serving others, and doing it out of selfrighteousness. When it for our own benefit, the work is dead. Some symptoms: You experience stress Annoyed easily Criticize others Get burnt out It is definitely not easy to be sacrificial and serve others, but when it is fueled by God, it is doable.\nWhat kind of fruitful work is powerful and effective? Work that is produced by faith. Faith in God that makes you desire to work for God. Verse 18 says that even demons have the intellectual belief that God is powerful, but we would be just like them if we produce no works. Our natural response when we are faithful is to do good works. Now if you don\u0026rsquo;t have any works, then that is a major testament to your faith.\nWe must prioritize God over our blessings. The blesser \u0026gt; the blessings.\nDo you fear God? if not, then you may need to reassess\u0026hellip; We must fear and revere God.\nWe want to be. selfless merciful understanding loving sharing giving\nbut this only becomes powerful when we do this out of faith.\nHow can we become people of faith? Verse 19: The overflowing love of Christ compels us to love on others. To do powerful and effective work, we must be overfilled with love. We need to especially pay attention to those in great need, those that are rejected by society. Orphans, widows, and the homeless. We should be serving outside of our comfort zone.\nWe must rely on God, on his mercy, on his grace. Only through this can we better see our brokenness and dependence on God. That we wouldn\u0026rsquo;t be prideful and rely on ourselves. This is what can lead us true work.\nTrue work doesn\u0026rsquo;t become burdensome, or stressful when it is based in faith.\n"},{"id":44,"href":"/sermons/what-kind-of-community-is-the-church-supposed-to-be/","title":"What kind of community is the church supposed to be?","section":"Sermons","content":"series: Acting in grace together\nverse: James 1:26-2:17\nHow can we act like a biblical gospel centered community?\nPeople generally seek a place of love.\nWhat kind of community are we supposed to be? We are called to be just or merciful To not have favoritism. You need to bear the burden, do the hard thing. Treat everyone equally. How welcoming am I of others? We should be encouraged to do the hard thing. Go make the lonely feel less lonely. We need to also be merciful as in caring for those in need. Not just being kind, but meeting the needs of others. If we are not exercises mercy, or justness, we will be judged by God. We need to be merciful because it\u0026rsquo;s the foundation of our faith, God\u0026rsquo;s mercy to us. Why is it so hard to achieve? It\u0026rsquo;s not that we don\u0026rsquo;t care for others, but we are inherently fearful of these situations. We are really shameful people and don\u0026rsquo;t like to share our struggles. But do we care enough to invest in our community? We chase after human glory and not God\u0026rsquo;s glory. The desire to be powerful, rich, social status. We favore those that make us feel safe. And we struggle to jepoardize that. When we act in favoritism, it shows that we do not understand what God\u0026rsquo;s vision is. \u0026ldquo;All people are built in the image of God\u0026rdquo;. No matter who it is, no matter how rude, low iq, low eq, anything. We should not insult ANYONE. We should not make people feel worthless. How can we achieve that Carefully look upon the glory of Christ. Even if it pains you, even if it\u0026rsquo;s burdensome, you should feel inclined to do good works. To take the harder path. Be radical, in the way we speak, act, and love onto others.\n"},{"id":45,"href":"/sermons/be-a-doer-not-a-hearer/","title":"Be a doer not a hearer","section":"Sermons","content":"series: Acting in grace together\nverse: James 1:22-27 Be doers, not hearers. Anyone who claims to be a christian and has no heart to act upon it, is not a christian. Don\u0026rsquo;t deceive yourself.\nIf you have any doubt about being a hearer and not a doer, you are simply a hearer. There\u0026rsquo;s no gray area.\nWhen we look into the bible, we should look intently. Look deeply. Don\u0026rsquo;t glance at the bible as a man would look at himself in a mirror. Instead look as a woman would gaze at herself in the mirror. Look and hear and read and be absorbed into the perfect law.\nExperiencing the power of scripture can only occur when you intently meditate on it. See the weeds, blemishes, and sins in your own reflection.\n"},{"id":46,"href":"/sermons/what-does-it-mean-to-live-by-faith/","title":"What DOes It Mean to Live by Faith","section":"Sermons","content":"series: P.A Speaking\nverse: Hebrews 12:1-2\nWe should inherently be in pursuit of God. We are born to immitate, and we should be immitating that which is perfect, which is God.\nWe usually follow those around us though. It\u0026rsquo;s not wrong to be influenced by others, but we must follow those worth following.\nThere should be a goal to reach. Without purpose we cannot find motivation.\nThough we may feel alone, you must know that we are not alone.\nSurround yourself with brothers that will bring you up. Will keep you accountable, that want to see you succeed.\nJesus, the founder and perfector of our faith should be who we look toward. We can do this by going to the cross.\nDon\u0026rsquo;t show off for yourself. God gave you this life to glorify Him.\n"},{"id":47,"href":"/sermons/how-i-should-recieve-gods-word/","title":"How I should recieve God's Word","section":"Sermons","content":"series: Acting in grace together verse: James 1:19-21\n\u0026ldquo;19 Know this, my beloved brothers: let every person be quick to hear, slow to speak, slow to anger; 20 for the anger of man does not produce the righteousness of God. 21 Therefore put away all filthiness and rampant wickedness and receive with meekness the implanted word, which is able to save your souls.\u0026rdquo; What does a biblical community look like? # Graciously acting together. The most important part of christian life is to be a \u0026ldquo;born again believer\u0026rdquo;. A life that is fully influenced by christ. Born against isn\u0026rsquo;t sinless, but toy should have a pursuit of a different kind of life.\nIf you have truly accepted Jesus Christ, you get to experience not just eternity and salvation, but also a new freedom. He naturally changes our heart, to know what is right and wrong. We have the truth within us.\n\u0026ldquo;The manual of life\u0026rdquo; The word of God is a necessity.\nWe consume so much data everyday so much content. But how much of that is God\u0026rsquo;s word? # This is what can suffocate us. We stop hearing of our God, and hear more of our world.\nOur pride makes us quick to anger, slow to hear, because it makes us not rely on him. We say, \u0026ldquo;I don\u0026rsquo;t need the bible to know what is right or wrong\u0026rdquo; and it leads us to misery. The opposite of this is humility. We need to have humility. Receive the implanted word with meekness.\nHumility is not thinking less of yourself, but rather thinking of yourself less.\nWe must fully accept the bible in its entirety, and not just partially. To know the real living God, you must know the bible and accept it in its entirety.\nWe sometimes put limits on our God. \u0026ldquo;God you empower me to be capable of X, but I don\u0026rsquo;t think i can do Y\u0026rdquo;. This mentallity speaks volumes. It says that you don\u0026rsquo;t trust God, and that you are prideful. It is undeniable that God is working in us and that he is always there for us. Stop praying to God begging for power. It is up to you to accept his love and help. Thus we need to humble ourselves in every manner. Be humble before God, be humble before the living word, be humble and a servant to others.\nDeny the flesh. Have a heart to make it work Do the uncomfortable Do the unthinkable. Love on Jesus in every moment Actively remind yourself of God.\n"},{"id":48,"href":"/sermons/a-portrait-of-ministry/","title":"A Portrait of Ministry","section":"Sermons","content":"series:\nverse: Mark 6:31-44 5 Loaves and 2 Fish\nDetails we may have missed from this story Jesus\nSheperd\u0026rsquo;s heart Always focused on others. Self emptying. Make yourself nothing to serve others. Disciples\n"},{"id":49,"href":"/sermons/the-life-giving-effect-of-gods-welcome/","title":"The Life Giving Effect of God's Welcome","section":"Sermons","content":"series: An inviting God\nverse: Genesis 2:16-17\nHuman souls were not made to bear outcomes. We are not in control of the way things turn out. But God does.\nThe Garden of Eden was a place of abundance. This story isn\u0026rsquo; about restriction and limitation and rules. God asks us to care for and maintain this beautiful orchard. We just have to take part of our own responsibilities, and also enjoy the fruit. God invites us to eat until we cant anymore. This center tree is also good but we are just not ready.\n"},{"id":50,"href":"/sermons/what-is-home/","title":"What is Home?","section":"Sermons","content":"series: An inviting God\nverse: Ephesians 5\nWhat is home? Home is joy comfort rest security etc But it can also have conflict bitterness frustration and abuse. Everyone desires a home to be filled with joy But is this possible? How do people relate to each other? How do we be more christ like?\nJesus Christ must be lord in all your relations. family, lover, employer. in everything. Have Christ be the center of your relationship. Every aspect in life is grounded in Christ. This is a picture of heaven on Earth, and heaven is our home.\nInteresting connection there.\nBeing filled with the Holy Spirit, your acxeptance of Jesus Christ as lord will impact those around you. They will see the preciousness of Jesus. You can create a little heaven wherever you go. You can be light to them.\nGod has to be the primary. Every relationship needs to be founded on Jesus.\nHow do we practically get here? Submitting to one another in a reverance for Christ. Give yourself to your wife. To lead your wife to Christlikeness Do not command or direct. It\u0026rsquo;s humble sacrificalness. The manliest thing you can do is falling on your knees in prayer to God.\nBe generous in the way you treat your employees. Be giving. And as an employee, treat your employer with love and kindness. With hard work and christ like action. how can we submit to those above and below us? Seek the fullness of the spirit in your life daily. actively intentionally. Daily seeking and submission to God. Ask God for this fullness, to help us. For God you will do anything to fix your approach of life. Challenge yourself in a group of believers. When you are filled, you wont know by emotional ecstasy, but you will want to make melodies for Christ. You will be thankful for every matter of your life, even when things are going awry to God. A heart of thanksgiving for God. You will be thankful that God remains by your side through everything. You will desire and want to submit to others. All because of what Jesus Christ has done for us. This is the life of God we must follow.\n"},{"id":51,"href":"/sermons/invited-to-rest/","title":"Invited to Rest","section":"Sermons","content":"series:\nverse: Matthew 11:25-30\nTo know Jesus as the son of God is an invitation to rest.\nJesus reveals the father to those he chooses? He invites weary sinners into his rest. Verse 25, Jesus declares himself as the promised Messiah. God is easier to understand when you notice all the love he has for us. Jesus is unique as he is THE son if God. Jesus transcends. A lot of the time we discuss how Jesus is similar to us. He is born in the flesh, suffered, and died. But at the same time he is not like is at all. He is unrelatable, intangible. God reveals himself to us and it\u0026rsquo;s a gracious decision. God is dealing with a race of sinners of which he owes nothing. Why should we be happy that he hides and reveals. Because he has revealed it to us. We are his little children. Though we are sinful. we were help God invites thiose that are tired and burdened.\nWe need the local church so that sin doesn\u0026rsquo;t permeate within us. Weekly church, touches with God, prayer and praise. All of these things allow us to be comfortable.\n"},{"id":52,"href":"/sermons/being-imitators-of-god/","title":"Being Imitators of God","section":"Sermons","content":"series:\nverse: Ephesians 5:1-21\nImitators of God # People by nature are imitators Don’t imitate the world, imitate God\n“How can we organically imitate God as Paul urges us to do”\nIt’s not just the performance of immoral acts, it must not even be mentioned. Media and culture has normalized these cruel things. To the point we have become desensitized. The result of all these immoralities is a loss of inheritance and God’s wrath will be upon us.\nBelievers are sealed by the holy spirit from the wrath of God. If you are constantly immoral, you must reflect objectively if you are really saved from Jesus. If you have experienced God’s grace, then you are to get rid of all of these things. Yes of course we fail, but Paul is talking about a continuous indifferent attitude to all of these sins. And that is where the danger lies. Are we indifferent to the current issues of sexual immorality?\nThe root problem of all of these desires is because those are all things that dethrone God from our lives. It’s idolatry. When you pursue these things, you are telling God “you are not enough for me”.\nImitators of God walk in wisdom, light, and spirit. This lifestyle looks like this\nWalk in love Expose darkness Take no part in these evil actions Live fruitfully as children of God Express devotion You have to live in the righteousness of God\nThere’s no list of commands to obey. If we follow a list it becomes a legalistic relationship instead of true faith. How can we be more christ like?\n==But instead let there be thanksgiving== When you are someone who constantly gives thanks, it humbles you. It means that God is enough for us. We are away from pride. We acknowledge our sinfulness. Evil things are unfitting of Christians. Embrace the renewed mind Gospel obedience works only when we realize how unworthy and condemned we are. "},{"id":53,"href":"/sermons/the-power-of-prayer/","title":"The Power of Prayer","section":"Sermons","content":"series:\nverse: 1 James 5:13-18 What does prayer do? the purpose is to bring healing from suffering Verse 13: is anyone along you suffering? Circumstantial, financial, psycholigcal, spiritual, all types of suffering. And we all experience it James says if we suffer, we should pray. Also pray when cheerful. Praise God for the glory he deserves. Active, vocal praise because we are joyful. Sometimes we may feel too tired or feeble to pray. That\u0026rsquo;s why you need people to pray for you. Try to pray for yourself, but in those moments you can\u0026rsquo;t. Have others do it for you. It\u0026rsquo;s a biblical matter to pray for each other. You draw closer to God when you pray. You are restored spiritually. Darkness is lit with the light of Jesus Christ. We should also confess our sins to one another. As you do so, pray for one another, it restores broken relationship.\nWhere does the power of prayer come from? Comes from the one who receives it, not from the one praying. The prayer of a righteous person has greater power. Dont confuse with holiness. Prayer is worthless if you haven\u0026rsquo;t placed your faith in Jesus. Christians are clothed in the righteousness of Christ.\nHow should we pray Fercantly bc we are people like Israelites, wandering, falling into sinful desires. We are all sinners. We must seek prayers and prayers for others.\nWe must intentionally put these into practice.\n"},{"id":54,"href":"/sermons/being-biblically-blessed/","title":"Being Biblically Blessed","section":"Sermons","content":"series: Blessed to be a blessing\nverse: Genesis 12:2-3\nWe should focus on the proclamation. Blessed to be a blessing is the theme of this year. What does it mean to be biblically blessed? We have recieved something that we don’t necessarily deserve. (general understanding)\nThroughout all of the bible theres a lot of worldly blessings promissed by God. Property, land, freedom, success. But after Jesus comes, you will rarely find these earthly blessings. Youll actually find afflictions and suffering up until Jesus’ ressurection. This is to show what it means to be under the blessings and provisions of God.\nWhat does it mean to be biblically blessed? It means to be under the care, protection and favor of God.\nIn this way, we should be able to serve as leaders and inspirations to others. King Solomon is a good example of this.\nThe reason for Earthly blessings is so that we can be that beacon of light for others. BUT after Jesus came, he showed the world that he is the direct SOURCE of all of these blessings. So the new testament is about sacrifice, suffering, and redemption.\nDont overly emphasize these earthly material blessings.\nBeing blessed is truly just being in the presence of God. Not about comfort, just that God is with us.\nWho is blessed? Those who trust in God’s word.\n"}]